"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2022
		
	Simulates geodesics on a sphere with a riemannian implementation of
	the main turtle primitives: F, f, + and -

	- To draw a geodesic of length L set with 10 segments of equal size (L/10): length_geodesic = L, nb_seg = 10
	- TODO: take a convention where principal curvatures are counted positive for the sphere ?
	
	Fig13.d-left --> REWIND
	Fig13.d-left --> ANIMATE til the end (takes 1'45 on a Mac M1 Max)

"""

import numpy as np
from math import ceil
from random import random

# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
from importlib import reload

import riemann_lsystem.surfaces
surfaces = reload(riemann_lsystem.surfaces)
import riemann_lsystem.riemannianturtle
riemannian_turtle = reload(riemann_lsystem.riemannianturtle)

from riemann_lsystem.surfaces import *
from riemann_lsystem.riemannianturtle import *

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 2. * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################

# Flags to control the display
PLOTSPACE = True

# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 1. * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

length_greatcircle = 2*np.pi*R

ra = 1.
rb = 0.5

# can draw a dashed geodesic to show how f is acting
# for 1-segment geodesic --> set this value at 2 (1 seg drawn, 1 not drawn)

origin_pt = [0., 0.]    # in (u,v) coordinates
#target_pts = [[0,0.3],[0.4,0.],[0,0.6],[0.7,0.],[0.0,0.9],[1.,0.3],[0.4,1.],[1,0.6],[0.8,1.],[1.0,0.75]]
target_pts = [[0,0.3], [0.4,0.],[0,0.6],[0.7,0.],[0,0.9],[1.,0.3],[0.4,1.],[1,0.6],[0.8,1.],[1.0,0.75]]  # in (u,v) coordinates

N = len(target_pts)

#ERRORS:
# Does not return for [0.0,0.9]


Axiom:
  # Sets the Riemannian space in which the turtle will move
  #nproduce SetSpace(Sphere(R),None)
  dictarg = {'CCW' : True}
  nproduce SetSpace(Patch(patch2),dictarg)
  nproduce ;(0)PlotSpace
  # Sets the initial position of the turtle in this space in the space coordinates: u,v 
  # (and p,q their first derivatives)
  turtle_init = origin_pt + [1., 0.0] # origin point + [p0,q0] (not used)
  nproduce _(LINEWIDTH)InitTurtle(turtle_init);(1)
  nproduce +(45)
  # plots the point at the origin
  nproduce Frame(0.2)
  # plots the target point as a sphere on the surface
  for tgpt in target_pts:
    nproduce ;(3)DrawPoint(tgpt,0.02)
  nproduce S(0)

derivation length: N+1 #nb_seg
production:
S(n):  
  if n < N:
    nproduce F(0.1)
    # RiemannLineTo:
    # - First parameter = target point [u,v]
    # - Second parameter = nb_segments + 1 to draw the geodesic
    # - Third parameter = nb max of iteration of the Newton method (this third parameter is optional)
    
    nproduce [RiemannLineTo(target_pts[n],20)]
    nproduce S(n+1)
  else:
    nproduce +(13)F(0.8)A


interpretation:
A:
  nproduce ;(2)@O(0.03)

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	pinfunc = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.05, 1),(0.0606061, 0.663636, 1),(0.329545, 0.213636, 1),(0.725758, 0.131818, 1),(1, 0.118182, 1)]) , 
	    )
	pinfunc.name = "pinfunc"
	import openalea.plantgl.all as pgl
	patch1 = pgl.NurbsPatch(	
	    pgl.Point4Matrix([[(0, -0.5, -0.5, 1), (0, -0.5, -0.166667, 1), (0, -0.5, 0.166667, 1), (0, -0.5, 0.5, 1)], [(0, -0.166667, -0.5, 1), (-1.16901, -0.238884, -0.528507, 1), (0, -0.166667, 0.166667, 1), (0, -0.166667, 0.5, 1)], [(0, 0.166667, -0.5, 1), (0.0230239, 0.191459, -0.165621, 1), (1.27141, 0.243672, 0.560603, 1), (0, 0.166667, 0.5, 1)], [(0, 0.5, -0.5, 1), (0, 0.5, -0.166667, 1), (0, 0.5, 0.166667, 1), (0, 0.5, 0.5, 1)]]) , 
ustride = 37 , vstride = 25 , 	    )
	patch1.name = "patch1"
	patch2 = pgl.NurbsPatch(	
	    pgl.Point4Matrix([[(0, -0.5, -0.5, 1), (0, -0.5, -0.166667, 1), (-3.10858e-17, -0.408396, -0.0269105, 1), (-6.93674e-17, -0.26667, 0.183708, 1)], [(0, -0.166667, -0.5, 1), (-1.3222, -0.219756, -0.404371, 1), (0, -0.166667, 0.166667, 1), (-0.134081, -0.0847893, 0.372718, 1)], [(-0.0320666, 0.0590737, -0.386584, 1), (0.0230239, 0.191459, -0.165621, 1), (0.0893436, 0.123651, 0.138459, 1), (0.128892, 0.229364, 0.724486, 1)], [(-0.0166851, 0.247108, -0.221285, 1), (-0.163158, 0.39697, -0.065535, 1), (-0.00298864, 0.671183, 0.288147, 1), (-0.43238, 0.408506, 0.380199, 1)]]) , 
ustride = 37 , vstride = 25 , 	    )
	patch2.name = "patch2"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': True},[('Function',pinfunc),('NurbsPatch',patch1),('NurbsPatch',patch2)])
	parameterset = [panel_0,]
	context["__functions__"] = [('pinfunc',pinfunc),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["pinfunc"] = pgl.QuantisedFunction(pinfunc)
	context["patch1"] = patch1
	context["patch2"] = patch2
