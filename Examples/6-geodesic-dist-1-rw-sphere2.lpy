"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2022
		
	Simulates geodesics on a sphere with a riemannian implementation of
	the main turtle primitives: F, f, + and -

	- To draw a geodesic of length L set with 10 segments of equal size (L/10): length_geodesic = L, nb_seg = 10
	- TODO: take a convention where principal curvatures are counted positive for the sphere ?

"""

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

import matplotlib.pyplot as plt
from random import random, seed

# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
from importlib import reload

import riemann_lsystem.surfaces
surfaces = reload(riemann_lsystem.surfaces)
import riemann_lsystem.riemannianturtle
riemannian_turtle = reload(riemann_lsystem.riemannianturtle)

from riemann_lsystem.surfaces import *
from riemann_lsystem.riemannianturtle import *

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

PRINT_CURVATURES = False
PLOTDS2 = False

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

#######################
# DISPLAY PARAMETERS
#######################

# Flags to control the display
PLOTSPACE = True

# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 0.5 * cm

# To control the Frame size
FRAMESIZE  = 0.05 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETER
#######################

extern(NBSTEPS = 100)
extern(WALKS = 10)

seed(1)

# Surface parameters
R = 1 * meter    # Radius of the sphere in meter
slen = 0.07 * meter
dt = 1           # in seconds

# theoretical diffusion coef D in a 2D flat space:
D = (slen**2)/(4*dt)

# OUTPUT
distance = None


# LineTo parameters
LINETO_MAXITER = 20
NB_POINTS = 20

SPHERE = True

# Temporary global value
Nstep = 0

#origin_pt = None

###### Arrays for result:
# Array of geodesic lengths for each walk. This array is updated at each timestep.
# It contains the geodesic distance of each walker to the origin at the current time step
geodesicLen = np.zeros(WALKS)

# At each timestep, the mean, Std and Variance of the lengths of the walks are computed
# using a generic algorithm for curved surfaces to compute the geodesic distance of each walker to the origin.
# this make 3 values at each time step:
geodesicMean = np.zeros(NBSTEPS)
geodesicStd = np.zeros(NBSTEPS)
geodesicVar = np.zeros(NBSTEPS)


geodesicLenTrue = np.zeros(WALKS)

# same computation with the use of an analytical formula on the sphere to compute the geodesic distances.
# At each timestep, the mean, Std and Variance of the lengths of the walks are computed
# this make 3 values at each time step:
geodesicMeanTrue = np.zeros(NBSTEPS)
geodesicStdTrue = np.zeros(NBSTEPS)
geodesicVarTrue = np.zeros(NBSTEPS)

def StartEach():
  geodesicLen=np.zeros(WALKS)
  geodesicLenTrue=np.zeros(WALKS)
  print("**** STEP ", Nstep)

def EndEach():
  global geodesicLen, geodesicLenTrue
  # filtering the indefined distance values (-1)
  #print(geodesicLen)
  posvals = geodesicLen >= 0.0
  #print(posvals)
  geodesicLen = geodesicLen[posvals]
  #print(geodesicLen)
  #print("Step ", Nstep, " filtered ", WALKS - len(geodesicLen))
  
  meand2 = np.mean(np.power(geodesicLen,2))
  deviation = 4*D*Nstep - meand2
  deviation = deviation * 1
  meand2 = 4*D*Nstep -deviation
  geodesicMean[Nstep] = meand2
  
  #geodesicMean[Nstep] = np.mean(np.power(geodesicLen,2))
  geodesicStd[Nstep] = np.std(np.power(geodesicLen,2))
  geodesicVar[Nstep] = np.var(np.power(geodesicLen,2))
  
  geodesicLen = np.zeros(WALKS)

  # case of a sphere where we know the ground truth
  if SPHERE:
    geodesicMeanTrue[Nstep] = np.mean(np.power(geodesicLenTrue,2))
    geodesicStdTrue[Nstep]  = np.std(np.power(geodesicLenTrue,2))
    geodesicVarTrue[Nstep]   = np.var(np.power(geodesicLenTrue,2))
    
    geodesicLenTrue = np.zeros(WALKS)


def End():
    plt.clf()
    #plt.plot(geodesicMean, 'ro')
    #plt.fill_between(geodesicMean+geodesicStd, geodesicMean-geodesicStd, facecolor='blue', alpha=0.5)
    t = np.arange(0,NBSTEPS,1)
    Kg = (1./R)**2 # Courbure de Gauss d'une sphere de rayon R
    flat_theo = 4*D*t 
    curved_theo = 4*D*t - 4/3. *Kg* (D*t)**2 *1
    print('Correction=')
    print(4/3. *Kg* (D*t)**2)
    plt.plot(t,flat_theo, c = 'b') # identity curve
    plt.plot(t,curved_theo, c = 'r') # identity curve
    plt.errorbar(t,geodesicMean, yerr=geodesicStd, fmt='.k');
    if SPHERE:
      plt.plot(t,geodesicMeanTrue, c='g');
    plt.xlabel('Time')
    plt.ylabel('Mean squared geodesic length')
    plt.title(f'MSGD. R={R:.2f}m,N={WALKS:3d},Time={NBSTEPS:3d},$\delta$ ={slen:1.2f}m,dt={dt:0.2f},D = {D:0.4f}')
    plt.grid(True)
    plt.figure(1).canvas.draw() # to force the drawing of the new figure
    plt.show()                  # to show the window containing the figure
    #plt.savefig('MSGDr4n80w800')


Axiom: 
  global origin_pt
  # Sets the Riemanian space in which the turtle will move
  if SPHERE == True:
    # can draw a dashed geodesic to show how f is acting
    # for 1-segment geodesic --> set this value at 2 (1 seg drawn, 1 not drawn)
    origin_pt = [1.0,0.8]
    nproduce SetSpace(Sphere(R))
    nproduce ;(0)PlotSpace
  else:
    origin_pt = [1.5,1.1]
    nproduce SetSpace(PseudoSphere(R))
    nproduce ;(0)PlotSpace(dict(CCW = False))
    
  turtle_init = origin_pt  #+ [1., 1.1]
  nproduce InitTurtle(turtle_init)
  
  nproduce ;(4)@O(0.02);(6)_(LINEWIDTH)
  for w in range(WALKS):
    nproduce [A(w,0,origin_pt)]
    
derivation length: NBSTEPS
production:

A(w,n,origin_pt):
  global Nstep
  Nstep = n
  a = 360*random()
  nproduce +(a)StaticF(slen)A(w,n+1,origin_pt)
  #if getIterationNb() == __lsystem__.derivationLength-1:
  #  nproduce [;(3)RiemannLineTo(origin_pt,NB_POINTS)]

interpretation:

A(w,n,origin_pt):
  global distance
  #print('A(w,n)=',w,n)
  # produce _(FRAMEWIDTH) Frame(FRAMESIZE)
  #if getIterationNb() == __lsystem__.derivationLength-1 :
  # print("NBSTEPS = ", getIterationNb())
  ut,vt,pt,qt = turtle.uvpq
  u, v = origin_pt[0], origin_pt[1]
  if n == 0:
    distance = 0.0
    errorval = 0
    distance_true = 0
  else:
    distance,errarray, errorval = geodesic_distance_to_point(turtle.space,(u,v),(ut,vt), nb_points = NB_POINTS, max_iter= LINETO_MAXITER)
    i = 0
    
    # If Sphere, the true geodesic distance can be computed (given two input points)
    if SPHERE:
      P = turtle.space.S(u,v)   # Origin point
      Q = turtle.space.S(ut,vt) # current endpoint of a random walk
      chordPQ = np.linalg.norm(P-Q)
      distance_true = 2*R * np.arcsin(chordPQ / (2*R))   
      geodesicLenTrue[w] = distance_true
    
    while errorval != 0 and i < 0:
      i += 1
      # try to change parameters to compute the distance again:
      print("Distance computation did not converge, retry ...,")
      #distance,errarray, errorval = geodesic_distance_to_point(turtle.space,(u,v),(ut,vt), nb_points = max(NB_POINTS-3*i,4), max_iter= LINETO_MAXITER)
      distance,errarray, errorval = 0,0,0
      if errorval == 0:
        pass # print(' Found for nb_points = {max(NB_POINTS-3*i,4):d}!!')
    #print(f"GeodesicDist(({u:.2f},{v:.2f}),({ut:.2f},{vt:.2f}) ) = {distance:.3f}")
  if errorval == 0 or errorval == 3:
    geodesicLen[w] = distance
    #print(f"true distance = {distance_true:2.4f}, estim distance = {distance:2.4f}")
    if errorval == 3:
      pass #print("Error 3: difference between last and initial value = ", errarray[-2]-errarray[0])
  else:
    geodesicLen[w] = -1   # an error prevented to computed a reliable distance
  
  produce ;(2)@O(0.02)


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	pinfunc = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.05, 1),(0.0606061, 0.663636, 1),(0.329545, 0.213636, 1),(0.725758, 0.131818, 1),(1, 0.118182, 1)]) , 
	    )
	pinfunc.name = "pinfunc"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': False},[('Function',pinfunc)])
	parameterset = [panel_0,]
	context["__functions__"] = [('pinfunc',pinfunc),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["pinfunc"] = pgl.QuantisedFunction(pinfunc)
