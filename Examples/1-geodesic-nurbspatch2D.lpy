"""
	L-systems in Riemannian geometry
	
		Author: Ch. Godin, Inria
		Date: 2019-2022

	Geodesics on a 2D nurbs patch.
"""
import sys
sys.path.append("../RiemannTurtleLib")

from importlib import reload

import surfaces
surfaces = reload(surfaces)
import riemannianturtle
riemannian_turtle = reload(riemannianturtle)

from surfaces import *
from riemannianturtle import *

%pastefile ../RiemannTurtleLib/riemannianrules.lpy

#from openalea.plantgl.scenegraph.nurbsshape import nurbsSphere
from nurbsshape import nurbsSphere


%pastefile riemannianrules.lpy


#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 2. * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################

# Flags to control the display
PLOTSPACE = True

# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 1. * cm

# To control the Frame size
FRAMESIZE  = 0.1 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

nb_seg = 10 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

length_geodesic = 1.0 

AXIOMTEST = 2

module SetSpace(surface), InitTurtle(turtle_state)

Axiom:
  global length_geodesic
  # Sets the Riemannian space in which the turtle will move
  # FIXME: nproduce ^(90)SetSpace(Patch(patch1),None) does not work as the InitTurtle 
  # positions the Turtle in the frame of the LPy space (assuming that the suface is mapped strainght here with no rotation or translation) 
  if AXIOMTEST == 0: 
    # Sets the initial position of the turtle in this space in the space coordinates: u,v (and p,q their first derivatives)
    u0= 0.5 #np.pi/6
    v0= 0.0 #np.pi/6
    nproduce InitTurtle([u0,v0,0,1])
    nproduce ;(1)_(LINEWIDTH)A(0)
  elif AXIOMTEST == 1:
    # Sets the initial position of the turtle in this space in the space coordinates: u,v (and p,q their first derivatives)
    u0= 0.5 #np.pi/6
    v0= 0.0 #np.pi/6    # show pi/2, 0 then different values between pi/2 and pi/3
    a = -np.pi/3 #np.pi/2.3 # to orient the turtle's head at the beginning
    # First option: dram a simple geodesic
    #nproduce InitTurtle([u0,v0,np.cos(a),np.sin(a)])
    #nproduce ;(1)A(0)
    # Second option:draw 10 geodesics with different initial directions
    #for i in range(nb+1):  
    #  a += np.pi/(nb+1)
    length_geodesic = 1.0 
    nb = 10
    for i in range(nb):  
      a += np.pi/(1.5*nb)
      nproduce _(LINEWIDTH)[InitTurtle([u0,v0,np.cos(np.pi/2+a),np.sin(np.pi/2+a)]) InterpolateColors(3,5, i/(nb-1))A(0)]
  elif AXIOMTEST == 2:
    # FIXME: if nb_seg = 1 and length_geodesic > 2*np.pi, it seems that the integration slightly drifts. Check this.
    patch1 = nurbsSphere()
    dictarg = {'CCW' : False}
    nproduce SetSpace(Patch(patch1),dictarg)
    u0= 0.5 
    v0= 0.0    
    length_geodesic =2*np.pi 
    nproduce InitTurtle([u0,v0,-0.5,0.5])
    nproduce ;(1)_(LINEWIDTH)A(0)


derivation length: int(nb_seg)
production:

A(n):
  nproduce F(length_geodesic/nb_seg)
  nproduce A(n+1)

interpretation:

A(n):
  produce _(FRAMEWIDTH)Frame(FRAMESIZE)


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	patch1 = pgl.NurbsPatch(	
	    pgl.Point4Matrix([[(0, -0.5, 0, 1), (0, -0.166667, 0, 1), (0.0012238, 0.186899, 0.00203897, 1), (0, 0.5, 0, 1)], [(-0.0337475, -0.532502, 0.259858, 1), (-0.355718, -0.0565335, 0.508855, 1), (-0.362102, 0.0901285, 0.405202, 1), (0.00594731, 0.473902, 0.221347, 1)], [(-0.0252141, -0.515907, 0.398777, 1), (-0.352318, -0.00279236, 0.564018, 1), (-0.363668, 0.10938, 0.503837, 1), (-0.0192294, 0.499495, 0.442237, 1)], [(0, -0.5, 0.666667, 1), (-0.33306, -0.00429326, 0.663507, 1), (-0.346903, 0.154968, 0.544111, 1), (0, 0.5, 0.666667, 1)], [(0, -0.5, 1, 1), (0, -0.166667, 1, 1), (0, 0.166667, 1, 1), (0, 0.5, 1, 1)]]) , 
	    )
	patch1.name = "patch1"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': True},[('NurbsPatch',patch1)])
	parameterset = [panel_0,]
	context["__functions__"] = []
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["patch1"] = patch1
