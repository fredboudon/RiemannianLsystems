"""
	L-systems in Riemannian geometry
	
		Author: Ch. Godin, Inria
		Date: 2019-2022

	Geodesics on a 2D nurbs patch.
"""
import sys
sys.path.append("../RiemannTurtleLib")

from importlib import reload

import surfaces
surfaces = reload(surfaces)
import riemannianturtle
riemannian_turtle = reload(riemannianturtle)

from surfaces import *
from riemannianturtle import *

%pastefile ../RiemannTurtleLib/riemannianrules.lpy

#from openalea.plantgl.scenegraph.nurbsshape import nurbsSphere
#from nurbsshape import nurbsSphere


%pastefile riemannianrules.lpy


#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 2. * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################

# Flags to control the display
PLOTSPACE = True

# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 1. * cm

# To control the Frame size
FRAMESIZE  = 0.1 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

nb_seg = 10 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

length_geodesic = 1.0 

AXIOMTEST = 1

module SetSpace(surface), InitTurtle(turtle_state)

Axiom:
  global length_geodesic, patch1, patch3
  # Sets the Riemannian space in which the turtle will move
  # FIXME: nproduce ^(90)SetSpace(Patch(patch1),None) does not work as the InitTurtle 
  # positions the Turtle in the frame of the LPy space (assuming that the suface is mapped strainght here with no rotation or translation) 
  if AXIOMTEST == 0: 
    # Sets the initial position of the turtle in this space in the space coordinates: u,v (and p,q their first derivatives)
    u0= 0.5 #np.pi/6
    v0= 0.0 #np.pi/6
    nproduce SetSpace(Patch(patch1))
    nproduce ;(0)PlotSpace(dict(CCW = False))
    nproduce InitTurtle([u0,v0,0,1])
    nproduce ;(1)_(LINEWIDTH)A(0)
  elif AXIOMTEST == 1:
    # Sets the initial position of the turtle in this space in the space coordinates: u,v (and p,q their first derivatives)
    u0= 0.5 #np.pi/6
    v0= 0.0 #np.pi/6    # show pi/2, 0 then different values between pi/2 and pi/3
    nb_curves = 10
    da = 180/(nb_curves)
    nproduce SetSpace(Patch(patch3))
    nproduce ;(0)PlotSpace(dict(CCW = True))
    # First option: dram a simple geodesic
    #nproduce InitTurtle([u0,v0,np.cos(a),np.sin(a)])
    #nproduce ;(1)A(0)
    # Second option:draw 10 geodesics with different initial directions
    #for i in range(nb+1):  
    #  a += np.pi/(nb+1)
    length_geodesic = 1.0 
    nproduce InitTurtle([u0,v0,1,0])
    for i in range(nb_curves):  
      nproduce +(da)
      nproduce _(LINEWIDTH)[ InterpolateColors(3,5, i/(nb_curves-1))A(0)]
  elif AXIOMTEST == 2:
    # Sets the initial position of the turtle in this space in the space coordinates: u,v (and p,q their first derivatives)
    u0= 0.5 #np.pi/6
    v0= 0.0 #np.pi/6    # show pi/2, 0 then different values between pi/2 and pi/3
    nb_curves = 10
    da = np.pi/(nb_curves)
    nproduce SetSpace(Patch(patch3))
    nproduce ;(0)PlotSpace(dict(CCW = False))
    # First option: dram a simple geodesic
    #nproduce InitTurtle([u0,v0,np.cos(a),np.sin(a)])
    #nproduce ;(1)A(0)
    # Second option:draw 10 geodesics with different initial directions
    #for i in range(nb+1):  
    #  a += np.pi/(nb+1)
    length_geodesic = 1.0 
    a =  0
    for i in range(nb_curves):  
      nproduce _(LINEWIDTH)[InitTurtle([u0,v0,np.cos(a),np.sin(a)]) InterpolateColors(3,5, i/(nb_curves-1))A(0)]
      a += da
  elif AXIOMTEST == 3:
    # FIXME: if nb_seg = 1 and length_geodesic > 2*np.pi, it seems that the integration slightly drifts. Check this.
    patch3 = nurbsSphere()
    nproduce SetSpace(Patch(patch3))
    nproduce PlotSpace(dict(CCW = False))
    u0= 0.5 
    v0= 0.0    
    length_geodesic =2*np.pi 
    nproduce InitTurtle([u0,v0,-0.5,0.5])
    nproduce ;(1)_(LINEWIDTH)A(0)


derivation length: int(nb_seg)
production:

A(n):
  nproduce F(length_geodesic/nb_seg)
  nproduce A(n+1)

interpretation:

A(n):
  produce _(FRAMEWIDTH)Frame(FRAMESIZE)


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	patch1 = pgl.NurbsPatch(	
	    pgl.Point4Matrix([[(0, -0.5, 0, 1), (0.0295491, 0.0172273, 0.0204014, 1), (0.0012238, 0.186899, 0.00203897, 1), (0, 0.5, 0, 1)], [(-0.0337475, -0.532502, 0.259858, 1), (0.325603, 0.00690836, 0.425017, 1), (0.303992, 0.200873, 0.366263, 1), (0.00594731, 0.473902, 0.221347, 1)], [(-0.00441042, -0.518639, 0.489863, 1), (0.346984, -0.0268568, 0.48347, 1), (0.334252, 0.212297, 0.456407, 1), (-0.0147519, 0.496314, 0.461605, 1)], [(0, -0.5, 0.666667, 1), (0.367414, 0.0717941, 0.599293, 1), (0.325871, 0.177369, 0.550018, 1), (0, 0.5, 0.666667, 1)], [(0, -0.5, 1, 1), (0, -0.166667, 1, 1), (0.000294821, 0.152723, 1.00003, 1), (0, 0.5, 1, 1)]]) , 
vstride = 20 , 	    )
	patch1.name = "patch1"
	patch2 = pgl.NurbsPatch(	
	    pgl.Point4Matrix([[(0, -0.5, -0.5, 1), (0, -0.5, -0.166667, 1), (0, -0.5, 0.166667, 1), (0, -0.5, 0.5, 1)], [(0, -0.166667, -0.5, 1), (-0.824406, -0.0196734, -0.133783, 1), (-0.822941, 0.137089, 0.0961383, 1), (0, -0.166667, 0.5, 1)], [(0, 0.166667, -0.5, 1), (-0.77868, 0.219814, -0.190883, 1), (-0.77506, 0.262243, 0.0584105, 1), (0, 0.166667, 0.5, 1)], [(0, 0.5, -0.5, 1), (0, 0.5, -0.166667, 1), (0, 0.5, 0.166667, 1), (0, 0.5, 0.5, 1)]]) , 
ustride = 10 , vstride = 10 , 	    )
	patch2.name = "patch2"
	patch3 = pgl.NurbsPatch(	
	    pgl.Point4Matrix([[(0, -0.5, -0.5, 1), (0, -0.5, -0.25, 1), (0, -0.5, 0, 1), (0, -0.5, 0.25, 1), (0, -0.5, 0.5, 1)], [(0, -0.25, -0.5, 1), (0.643526, -0.25, -0.25, 1), (0.643526, -0.25, 0, 1), (0.643526, -0.25, 0.25, 1), (0, -0.25, 0.5, 1)], [(0, 0, -0.5, 1), (0.643526, 0, -0.25, 1), (0.643526, 0, 0, 1), (0.643526, 0, 0.25, 1), (0, 0, 0.5, 1)], [(0, 0.25, -0.5, 1), (0.643526, 0.25, -0.25, 1), (0.643526, 0.25, 0, 1), (0.643526, 0.25, 0.25, 1), (0, 0.25, 0.5, 1)], [(0, 0.5, -0.5, 1), (0, 0.5, -0.25, 1), (0, 0.5, 0, 1), (0, 0.5, 0.25, 1), (0, 0.5, 0.5, 1)]]) , 
ustride = 10 , vstride = 10 , 	    )
	patch3.name = "patch3"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': True},[('NurbsPatch',patch1),('NurbsPatch',patch2),('NurbsPatch',patch3)])
	parameterset = [panel_0,]
	context["__functions__"] = []
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["patch1"] = patch1
	context["patch2"] = patch2
	context["patch3"] = patch3
