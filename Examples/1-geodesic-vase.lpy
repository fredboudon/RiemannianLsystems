"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2020
		
	Simulates geodesics on a surface of revolution looking like a sphere
	
	Note that depending on the negative curvature at the neck, geodesics can be trapped in the lower part for instance

"""
# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
import sys
sys.path.append("../RiemannTurtleLib")

from importlib import reload

import surfaces
surfaces = reload(surfaces)
import riemannianturtle
riemannian_turtle = reload(riemannianturtle)

from surfaces import *
from riemannianturtle import *

%pastefile ../RiemannTurtleLib/riemannianrules.lpy

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 2. * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################

# Flags to control the display
PLOTSPACE = True

# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 4. * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

def vase(x, *args):
  if x < 0: 
    x = 0.
  u = (x) / 10.
  #print ("x =", x, "u= ", u)
  return 5* vasefunc.getValue(u)


# Tighten the nec of the pin form structure to see that the geodesic 
# at some threshold is doomed to stay in the lower part and cannot reach the other part
profile = vase
nb_seg = 10 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

length_geodesic = 20.0 

Axiom: 
  # Sets the Riemanian space in which the turtle will move
  #nproduce SetSpace(Revolution(rfunc1,rprime1,rsecond1, 8*np.pi))
  nproduce SetSpace(Revolution(profile,zmin = 0, zmax = 10), None)
  #nproduce SetSpace(PseudoSphere(profile,profile_prime,profile_second,zmin = 0, zmax = 10.))
  # Sets the initial position of the turtle in this space in the space coordinates: u,v (and p,q their first derivatives)
  #nproduce InitTurtle([0,0,1/np.sqrt(2)/R,1/np.sqrt(2)/R])
  #  nb = 
  #  opening = 3*np.pi/2 # np.pi/2
  #  for k in range(nb+1):
    #    u = 0
    #    v = 0.6
    #    p = np.sin(opening*k/nb)
    #    q = np.cos(opening*k/nb)
    #    nproduce [InitTurtle([u,v,p,q]);(10+k)A(0)]
  # Starts pointing towards the central axis
  #nproduce _(LINEWIDTH)[;(2)InitTurtle([0,0.2,0,-0.1])A(0)]
  # Start pointing sideways
  nproduce _(LINEWIDTH)[;(2)InitTurtle([0,0.1,1,0.0])A(0)]


derivation length: int(nb_seg)
production:

A(n):
  nproduce F(length_geodesic/nb_seg)
  nproduce A(n+1)

interpretation:


A(n):
  if turtle.boundary_reached == True:
    u,v,p,q = turtle.uvpq
    print("BOUNDARY REACHED !", u,v,p,q)
  produce _(FRAMEWIDTH)Frame(FRAMESIZE)



endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	vasefunc = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.00200282, 1),(0.0160347, 0.559939, 1),(0.440107, -0.0643654, 1),(0.905046, 0.267064, 1),(1, 0.135477, 1),(1, 0.00596927, 1)]) , 
	    )
	vasefunc.name = "vasefunc"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': True},[('Function',vasefunc)])
	parameterset = [panel_0,]
	context["__functions__"] = [('vasefunc',vasefunc),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["vasefunc"] = pgl.QuantisedFunction(vasefunc)
