
import numpy as np
from math import ceil, pi
from random import random, uniform,seed
from openalea.plantgl.all import *

from importlib import reload

import riemann_lsystem
import riemann_lsystem.surfaces
surfaces = reload(riemann_lsystem.surfaces)
import riemann_lsystem.riemannianturtle
riemannian_turtle = reload(riemann_lsystem.riemannianturtle)

from riemann_lsystem.surfaces import *
from riemann_lsystem.riemannianturtle import *

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

SPACE = 1

LINEWIDTH = 0.1
squarelength = 8 if SPACE == 2 else 5
R = 5
nbseg = 30

seed(1)
nb = 25
dim = R*pi
heigth = 0.8
#dim, heigth = 2*R*pi, 2.5

pts = [[[(i/nb-0.5)*dim,(j/nb-0.5)*dim,heigth*uniform(-1,1),1] for i in range(nb)] for j in range(nb)]
npatch = NurbsPatch(pts, ustride= 200, vstride=200)


module Square1, Square2, Square3, Squarei

Axiom:
  # Sets the Riemannian space in which the turtle will move
  nproduce _(LINEWIDTH)
  if SPACE == 1:
    nproduce SetSpace(Sphere(R))
    nproduce ;(0)PlotSpace() ;(3)
    nproduce InitTurtle([0,0,0,1])f(1) 
  else:
    nproduce SetSpace(Patch(npatch))
    nproduce ;(0)@g(npatch) ;(3)
    nproduce InitTurtle([0.5,0.5,0,1])f(1)
  nproduce  Squarei(0)


derivation length: 3
production:
Squarei(i) --> Squarei(i+1)

interpretation:
maximum depth: 5

Squarei(i):
  if i == 0: produce Square1()
  elif i == 1: produce Square2()
  else : produce Square3()

Square1():
  nproduce  SquareF(squarelength)

Square2():
  nproduce StartIndirectInterpretation
  if SPACE == 1:
    l = squarelength/R
  else:
    l = squarelength/(dim)
    print(l)    
  nproduce SquareF(l)


SquareF(l):
  nproduce @Gc -(90)F(l/2)+(90)F(l)+(90)F(l)+(90)F(l)+(90)F(l/2)

Square3():
  l = sqrt(2)*squarelength/2
  if SPACE == 1:
    uvpq_s = riemannian_turtle_move_forward(turtle.uvpq, turtle.space, squarelength/2, 5)
    uvpq0 = uvpq_s[-1]
  else:
    uvpq0 = turtle.uvpq
  coords = [(45,l),(135,l),(225,l),(315,l)]
  uvcoords = []
  for ac,lc in coords:
    uvpq = riemannian_turtle_turn(uvpq0, turtle.space, ac)
    uvpq_s = riemannian_turtle_move_forward(uvpq, turtle.space, lc)
    print(turtle.space.path_length(uvpq_s))
    uvcoords.append(uvpq_s[-1][:2])
  
  nproduce RiemannMoveTo(uvpq0[:2]) RiemannPinpoint(uvpq0[2:])
  for ac,lc in coords:
    nproduce [ +(ac) ,(7) _(LINEWIDTH/10) F(l) ]
  nproduce [,(7) @O ]
  
  nproduce RiemannMoveTo(uvcoords[0]) @Gc
  for uvpq in uvcoords[1:]:
    nproduce RiemannLineTo(uvpq,nbseg) @O(2*LINEWIDTH)
  nproduce RiemannLineTo(uvcoords[0],nbseg)



endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_7 = pgl.Material("Color_7" , ambient = (0,0,0) , diffuse = 5 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
