from openalea.plantgl.all import *
from math import *

class NurbsSwung:
    def __init__(self, profileList, angleList, degree = 3, ccw = True, slices = 30, stride = 30):
        assert degree in [1,3]
        for c in profileList:
          assert len(c.ctrlPointList) ==  len(profileList[0].ctrlPointList)
        self.profileList = profileList
        self.angleList = angleList
        self.degree = degree
        self.ccw = ccw
        self.slices = slices
        self.stride = stride

        self.build_interpolator()

    def build_interpolator(self):
        from openalea.plantgl.scenegraph.cspline import CSpline, cspline
        if self.degree > 1:
            #cpoints = [discretize(NurbsCurve([Vector4(p.x,p.y,a,p.z) for p in s.ctrlPointList])).pointList for s,a in zip(self.profileList, self.angleList)]
            cpoints = [[Vector3(p.x,p.y,a) for p in s.ctrlPointList] for s,a in zip(self.profileList, self.angleList)]
            self.cnurbs = [cspline([cpoints[i][j] for i in range(len(cpoints))]) for j in range(len(cpoints[0]))]
            cpoints = [list(n.ctrlPointList) for n in self.cnurbs]
        else:
            cpoints = [[Vector4(p.x,p.y,a,p.z) for p in s.ctrlPointList] for s,a in zip(self.profileList, self.angleList)]
        knots =  None #[self.angleList[0] for i in range(degree)]+self.angleList+[self.angleList[-1] for i in range(degree)]
        print( cpoints)
        for l in cpoints: print(len(l))
        self.profileInterpolator = NurbsPatch(cpoints, ccw=self.ccw, vstride=self.stride, ustride=self.slices, vknotList=self.cnurbs[0].knotList if self.degree > 1 else None, udegree=self.degree)
        print(self.profileInterpolator.vknotList)

    def getPointAt(self, u, v):
        result = self.profileInterpolator.getPointAt(u,v)
        return Vector3(result.x*cos(v), result.x*sin(v), result.y)
    def discretize(self):
        #return self.profileInterpolator
        mesh = discretize(self.profileInterpolator)
        mesh.pointList = [Vector3(p.x*cos(p.z),p.x*sin(p.z), p.y) for p in mesh.pointList]
        return mesh


def swungtopatch(swg):
	return NurbsSwung(swg.profileList, swg.angleList, swg.degree, ccw=swg.ccw, stride=swg.stride, slices=swg.slices)#, uknotList=knots)

swung = Swung(profileList=[profile1,profile2,profile1,profile1,profile3,profile1],angleList=list(map(radians,[0,90,150,180,270,360])),stride=100, slices=100, ccw=False)
Axiom: ,(2)@g(swungtopatch(swung).discretize()) [@M(1,0,0)@g(swung)]

derivation length: 1
production:


interpretation:


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	profile1 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0.00069589, 1.00789, 1),(0.104966, 1.0014, 1),(0.20528, 1.00403, 1),(0.349716, 0.909431, 1),(0.403268, 0.774369, 1),(0.419107, 0.623898, 1),(0.429667, 0.526224, 1),(0.438881, 0.437441, 1),(0.437586, 0.338795, 1),(0.462357, -0.00394254, 1),(0.552416, -0.00823869, 1)]) , 
	    )
	profile1.name = "profile1"
	profile2 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0.00069589, 1.00789, 1),(0.336375, 0.993339, 1),(0.395826, 0.779637, 1),(0.440982, 0.99073, 1),(0.498194, 1.0718, 1),(0.740184, 1.18119, 1),(0.815247, 0.748902, 1),(0.508729, 0.486339, 1),(0.399102, 0.31775, 1),(0.407162, 0.0118276, 1),(0.528584, -0.00823869, 1)]) , 
	    )
	profile2.name = "profile2"
	profile3 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0.00069589, 1.00789, 1),(0.123445, 1.01195, 1),(0.228937, 0.963354, 1),(0.31272, 0.80804, 1),(0.387429, 0.75325, 1),(0.53333, 0.679205, 1),(0.527341, 0.483987, 1),(0.482249, 0.295509, 1),(0.514141, 0.161926, 1),(0.545151, 0.0354829, 1),(0.557182, -0.0130051, 1)]) , 
	    )
	profile3.name = "profile3"
	profile2_2 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0.00069589, 1.00789, 1),(0.336375, 0.993339, 1),(0.395826, 0.779637, 1),(0.580813, 0.918431, 1),(0.781882, 0.748902, 1),(0.446766, 0.5912, 1),(0.446766, 0.508407, 1),(0.407162, 0.0118276, 1),(0.528584, -0.00823869, 1)]) , 
	    )
	profile2_2.name = "profile2_2"
	panel_0 = ({'name': 'Panel 1', 'active': True, 'visible': True},[('Curve2D',profile1),('Curve2D',profile2),('Curve2D',profile3),('Curve2D',profile2_2)])
	parameterset = [panel_0,]
	context["__functions__"] = []
	context["__curves__"] = [('profile1',profile1),('profile2',profile2),('profile3',profile3),('profile2_2',profile2_2),]
	context["__parameterset__"] = parameterset
	context["profile1"] = profile1
	context["profile2"] = profile2
	context["profile3"] = profile3
	context["profile2_2"] = profile2_2
