import sys
sys.path.append("../RiemannTurtleLib")
import numpy as np
from numpy.linalg import norm
from openalea.plantgl.scenegraph.nurbsshape import nurbHalfEllipse

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

import openalea.plantgl.all as pgl
import nurbsswung as ns
reload(ns)

from math import *

swung = ns.NurbsSwung(profileList=[profile0, profile1,profile2,profile3,profile2,profile5,profile6],angleList=list(map(radians,[-30,0,90,180,270,380,400])),stride=100, slices=100, ccw=False)

#######################
# Units0.5
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

#######################
# DISPLAY PARAMETERS
#######################

# Flags to control the display
PLOTSPACE = False

# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 1. * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

nb_seg = 5 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

length_geodesic = 1.5

currentpos = []

module DrawVect

Axiom:
  nproduce ,(2) _(0.01)
  # Sets the Riemannian space in which the turtle will move
  patch = Patch(swung)
  def intensity(u,v):
    return norm(swung.getVTangentAt(u,v))
  nproduce SetSpace(patch) PlotSpace(intensity)
  #nproduce Venation(0.01)
  # Sets the initial position of the turtle in this space in the space coordinates: u,v (and p,q their first derivatives)
  v0= radians(175) 
  u0 = 0.01
  
  nb = 15
  a = -150 #np.pi/2.3 # to orient the turtle's head at the beginning
  da = 280/nb
  for i in range(nb+1):  
    nproduce [InitTurtle([u0,v0,1,0]) +(a) ,(7) # InterpolateColors(3,5, i/(nb)) 
    nproduce A(nb_seg, length_geodesic*(1.3+cos(radians(a+20))/4) )]
    a += da
  


derivation length: nb_seg
production:


A(n,l):
  if n > 0:
    nproduce F(l/nb_seg)
    ang = 8 #/(nb_seg-n+1)
    nproduce [+(ang)A(n-1,l)]
    nproduce [-(ang)A(n-1,l)]

interpretation:
maximum depth: 2

D --> DrawVect(turtle.space.shift_vector(*turtle.uvpq))


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_7 = pgl.Material("Color_7" , ambient = (0,143,0) , diffuse = 0.27972 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
	import openalea.plantgl.all as pgl
	profile0 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0.159267, -0.0785046, 1),(0.246725, -0.115986, 1),(0.418886, -0.106894, 1),(0.543969, -0.0938118, 1),(0.686726, -0.0386873, 1)]) , 
	    )
	profile0.name = "profile0"
	profile1 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0.159267, -0.0267421, 1),(0.360287, -0.0527448, 1),(0.644378, -0.0644886, 1),(0.836353, -0.0444481, 1),(0.979111, -0.00451243, 1)]) , 
	    )
	profile1.name = "profile1"
	profile2 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0.0228588, 0.000702648, 1),(0.398259, -0.00527968, 1),(0.680451, 0.0114555, 1),(0.986343, 0.053629, 1),(1.20866, 0.176999, 1)]) , 
	    )
	profile2.name = "profile2"
	profile3 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0.0198535, -0.00100558, 1),(0.49177, -0.007807, 1),(1.1543, 0.104108, 1),(1.64746, 0.308521, 1),(1.99167, 0.902758, 1)]) , 
	    )
	profile3.name = "profile3"
	profile5 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0.186302, -0.00759292, 1),(0.363177, 0.00604102, 1),(0.472917, 0.0443814, 1),(0.588194, 0.0590567, 1),(0.772764, 0.14115, 1)]) , 
	    )
	profile5.name = "profile5"
	profile6 = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0.363052, 0.00124457, 1),(0.402315, 0.00604102, 1),(0.440092, 0.0140814, 1),(0.484669, 0.0262317, 1),(0.536677, 0.0464629, 1)]) , 
	    )
	profile6.name = "profile6"
	profsphere = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0.000652829, 0.500653, 1),(0.703638, 0.498383, 1),(0.702005, -0.493631, 1),(0.00250977, -0.498432, 1)]) , 
	    )
	profsphere.name = "profsphere"
	panel_0 = ({'name': 'Panel 1', 'active': True, 'visible': True},[('Curve2D',profile0),('Curve2D',profile1),('Curve2D',profile2),('Curve2D',profile3),('Curve2D',profile5),('Curve2D',profile6),('Curve2D',profsphere)])
	parameterset = [panel_0,]
	context["__curves__"] = [('profile0',profile0),('profile1',profile1),('profile2',profile2),('profile3',profile3),('profile5',profile5),('profile6',profile6),('profsphere',profsphere),]
	context["__parameterset__"] = parameterset
	context["profile0"] = profile0
	context["profile1"] = profile1
	context["profile2"] = profile2
	context["profile3"] = profile3
	context["profile5"] = profile5
	context["profile6"] = profile6
	context["profsphere"] = profsphere
