"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2022

   Fig17.d --> TEST1 = True, derivation length: 7
   Fig17.e --> TEST1 = False, derivation length: 16

"""

import numpy as np
from math import ceil
from random import random

# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
from importlib import reload

import riemann_lsystem.surfaces
surfaces = reload(riemann_lsystem.surfaces)
import riemann_lsystem.riemannianturtle
riemannian_turtle = reload(riemann_lsystem.riemannianturtle)
import riemann_lsystem.lineintersection as li
reload(li)

from riemann_lsystem.lineintersection import *
from riemann_lsystem.surfaces import *
from riemann_lsystem.riemannianturtle import *

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

# Flags to control the display
PLOTSPACE = True

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 1.0 * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################


# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 1. * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

# Tighten the nec of the pin form structure to see that the geodesic 
# at some threshold is doomed to stay in the lower part and cannot reach the other part
nb_seg = 10 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

slen = 0.2

# Tree parameter
angle = 45

# Length and step of the path
LENGTH = 2* np.pi *R               # length on the surface of the drawn geodesic path (in a.u.)
STEPSIZE = 0.1     # size of a step (in a.u.) used to draw pieces of geodesic
LEAVES = False
ROTATELEAF = False

# Set of trajectories already existing since the beginning of the simulation
trajectories = LineSet()

AXIOMTEST = 2
TEST1 = False  # True for long internodes

def length(n):
  return 4*STEPSIZE - 4*n * STEPSIZE/10.

Axiom: 
  # Sets the Riemanian space in which the turtle will move. The args = (True) 
  space = Sphere(R) #EllipsoidOfRevolution(ra,rb)
  nproduce SetSpace(space)
  nproduce ;(0)PlotSpace()
  trajectories.setSpace(space)
  
  if AXIOMTEST == 1:
    # test the passage through the pseudosphere
    nproduce ;(2)InitTurtle([-1.5,0.0,1.,0.])
  elif AXIOMTEST == 2:
    nproduce ;(3)InitTurtle([0.0,0.0,0.0,1.0])
  else:
    nproduce ;(3)InitTurtle([0.1,0.01,1.0,0.00])
  nproduce ;(6)_(LINEWIDTH)?T(ParameterSet())A(0)

# Try up to 16
derivation length: 16 
production:

?T(tstate) A(n):
  # branching and leaf angles
  ba, la = (-angle, 30) if n % 2 == 0 else (angle,-30)
  
  if TEST1:
    ilen = 0.30
  else:
    ilen = 0.15
  uvpq_s = forward(tstate,ilen, MAXSTEPLEN)

  # Construct the corresponding line made of uv coords
  # 1. The turtle has current coordinates uvpq
  curpos = [(tstate.uvpq[0],tstate.uvpq[1])]
  # 2. including current postion in front of the uv coords of the uvpq_s path returned by formard
  uvs = curpos+[(s[0],s[1]) for s in uvpq_s]
  
  # 3. Test the possible intersection of this potential line with 
  # already existing MTs stored in the global object trajectories
  intersection = trajectories.test_intersection(uvs)
  # print(intersection,uvs)

  if intersection:
    nproduce ?T(ParameterSet())A(n+1)
  else:
    line_id = trajectories.add_line_from_point(tstate.uvpq,uvs) 
    nproduce P(uvpq_s) 
    nproduce [+(ba)
    if LEAVES:
      nproduce [L(la,0)]
    nproduce ?T(ParameterSet())A(n+1)]
    nproduce ?T(ParameterSet())A(n+1)

L(la,n):
  if n > 5:
    produce
  else:
    produce L(la,n+1)

interpretation:

maximum depth: 2

A(n):
  produce #;(2)@O(0.03)
  #nproduce CovariantBasis(0.3)
  #nproduce _(0.03)DrawVect(velocity,1.5)
  #if FRAME: nproduce _(0.01)Frame(0.2)

L(la,n):
  if n == 0:
    produce
  if ROTATELEAF:
    turn = np.copysign(90,la)
  else:
    turn = 0
  produce ;(2)-(la)/(turn)~l(1.0)



endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__references__ = '#'
