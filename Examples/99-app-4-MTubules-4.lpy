"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2022
		
     
"""

import numpy as np
from math import ceil
from random import random, seed

# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
from importlib import reload

import riemann_lsystem.surfaces
surfaces = reload(riemann_lsystem.surfaces)
import riemann_lsystem.riemannianturtle
riemannian_turtle = reload(riemann_lsystem.riemannianturtle)

from riemann_lsystem.surfaces import *
from riemann_lsystem.riemannianturtle import *

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

seed(0)

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
ra = 1. * meter   # Radius of the sphere in meter
rb = 0.5 * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################

# Flags to control the display
PLOTSPACE = True

# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 1. * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

LINETO_MAXITER = 30

origin_pt = [0.0, 0.0]    # in (u,v) coordinates

TEST0 = 0   # Test 0 test one target point only
TEST = TEST0

dt = 0.1         # sec

# Managing the discretization of MT segments
DL = 10 * cm      # size of segment that are synthesized or depolymerized (no physical meaning, just quantization)
N = 10           #  Number of initial segments of size DL


PolRate = 0.5      # cm/sec
DepRate = 0.5      # cm/sec

K = 1           # number of microtubules

Axiom:
  nproduce SetSpace(EllipsoidOfRevolution(ra,rb))
  nproduce ;(0)PlotSpace
  turtle_init = origin_pt + [0., 1.] # (u0,v0,p0,q0) needed to initialize the turtle on the surface
  nproduce _(LINEWIDTH)InitTurtle(turtle_init)
  nproduce Frame(0.2)
  uv = (origin_pt[0]+0.3,origin_pt[1]+0.5)
  for k in range(K):
    alpha = random() * 360
    origin_pt[0] = random()*2*np.pi
    origin_pt[1] = - np.pi/2 + random()*np.pi
    turtle_init = origin_pt + [0., 1.]
    nproduce InitTurtle(turtle_init)
    nproduce +(alpha)
    nproduce B(0, 0)
    for i in range(N):
      nproduce S(DL)?T(ParameterSet())
    nproduce A(0, 0)

derivation length: 1000 
production:

# Polymerization at the + end (A)
# an A polymerizes at a rate PolRate and creates a segment as soon as its size reaches PolDL.
# the length being constructed is stored in a buffer in the state of A: pol_lenbuff
A(t, pol_lenbuff):
  pol_lenbuff += PolRate * dt
  if pol_lenbuff >= DL:
    # Produce a segment
    nproduce S(DL)?T(ParameterSet())
    nproduce A(t+dt,pol_lenbuff-DL)
  else:
    nproduce A(t+dt,pol_lenbuff)

# Depolymerization at the - end (B)
# The problem is that if depolymerization is rapid, in dt it can do much more than DL
# and in this case unstacking one element is not enough to meet what is needed by 
# the depolymerisation rate.
# So for this, decomposition rules are needed. They will make it possible to empty
# the dep_length buffer when it augments by eating (depolymerizing) more than one segment
# during the same dt step. See below.
B(t, dep_lenbuff)S(x)?T(state):
  #print("dep_lenbuff", dep_lenbuff)
  dep_lenbuff += DepRate * dt
  if dep_lenbuff >= DL:
    uvpq = state.uvpq
    nproduce InitTurtle(uvpq)
    nproduce B(t+dt, dep_lenbuff-x)
  else:
    nproduce B(t+dt,dep_lenbuff) S(x) ?T(ParameterSet())

decomposition:
maximum depth: 1000
# Decomposition rule to emty the dep_lenbuffer before the next step
# and remove as many segments as necessary (maximum imposed by maximum depth variable)
#
B(t, dep_lenbuff)S(x)?T(state):
  #print("decomposition:", dep_lenbuff)
  if dep_lenbuff >= DL:
    uvpq = state.uvpq
    nproduce InitTurtle(uvpq)
    nproduce B(t, dep_lenbuff-x)
  else:
    nproduce B(t, dep_lenbuff)S(x)?T(ParameterSet())

interpretation:

A(t,pol_lenbuff):
  produce ;(2)@O(0.03)
  
B(t,dep_lenbuff):
  nproduce ;(3)@O(0.03)

S(dl): 
  produce F(dl)
  
endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	pinfunc = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.05, 1),(0.0606061, 0.663636, 1),(0.329545, 0.213636, 1),(0.725758, 0.131818, 1),(1, 0.118182, 1)]) , 
	    )
	pinfunc.name = "pinfunc"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': False},[('Function',pinfunc)])
	parameterset = [panel_0,]
	context["__functions__"] = [('pinfunc',pinfunc),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["pinfunc"] = pgl.QuantisedFunction(pinfunc)
