"""
	L-systems in Riemannian geometry
	
		Author: Ch. Godin, Inria
		Date: 2019-2022

	Example of a 2D intrinsic Riemaniann space
	Space is curved by a point source (represented as a sphere)
	Coordinates are the usual cartesian coords, but the metric is different at different points.
	
"""

import numpy as np
from math import ceil
from random import random, seed

# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
from importlib import reload

import riemann_lsystem.surfaces
surfaces = reload(riemann_lsystem.surfaces)
import riemann_lsystem.riemannianturtle
riemannian_turtle = reload(riemann_lsystem.riemannianturtle)

from riemann_lsystem.surfaces import *
from riemann_lsystem.riemannianturtle import *

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

######################################
# DEFINITION OF THE METRIC (INTRINSIC)
######################################

# Hyperbolic metric (Halfplane PoinCarÃ©-Beltrami)
def g11_hyperbolic(u,v,*args):
    return 1./v**2
# g11 with swapped u,v --> v,u (to carry out devivative of first argument)
def g11s_hyperbolic(v,u,*args):
    return g11_hyperbolic(u,v,*args)

# g12 == g21
def g12_hyperbolic(u,v,*args):
    return 0.
def g12s_hyperbolic(v,u,*args):
    return g12_hyperbolic(u,v,*args)

def g22_hyperbolic(u,v,*args):
    return 1./v**2
def g22s_hyperbolic(v,u,*args):
    return g22_hyperbolic(u,v,*args)



#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 1. * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################


# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 0.9 * cm

# To control the Frame size
FRAMESIZE  = 0.2 * meter
FRAMEWIDTH = 0.6 * cm

#######################
# SIMULATION PARAMETERS
#######################

# Tighten the nec of the pin form structure to see that the geodesic 
# at some threshold is doomed to stay in the lower part and cannot reach the other part
nb_seg = 10 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

slen = 0.10 # 

#Metric parameters for psi and psd

ry = 1.
rz = 2.

TEST = 1

Axiom: 
  # choice of functions used to define the intrinsic metric (see above their definition
  metric_funcs = {'g11' : g11_hyperbolic, 'g12' : g12_hyperbolic, 'g22' : g22_hyperbolic, 'g11s' : g11s_hyperbolic, 'g12s' : g12s_hyperbolic, 'g22s' : g22s_hyperbolic}
  if TEST ==1:
        # Note the second argument is optional and set the display 
    nproduce SetSpace(RiemannianSpace2D(**metric_funcs, umin = -1, umax = 1., vmin = 0.12, vmax = 2))
    nproduce ;(0)PlotSpace
    nproduce PlotDS2(dict(DS2_SCALEFACTOR = 20))
    nproduce InitTurtle([-0.9,1.8,1.,0.])
    nproduce _(0.005)
    nproduce StartIndirectInterpretation
    a = 0.2
    for i in range(9):
      nproduce ;(1)[
      for j in range(9):
        nproduce F(a)-(90)F(a)-(90)F(a)-(90)F(a)-(90)
        nproduce f(a)
      nproduce ]
      nproduce -(90)f(a)+(90)
    nproduce StopIndirectInterpretation



derivation length: 10
production:


interpretation:

A(n):
  produce _(FRAMEWIDTH) Frame(FRAMESIZE)


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__references__ = '#'
