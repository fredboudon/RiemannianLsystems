"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2022
		
     
"""

import numpy as np
from math import ceil
from random import random, seed

# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
from importlib import reload

import riemann_lsystem.surfaces
surfaces = reload(riemann_lsystem.surfaces)
import riemann_lsystem.riemannianturtle
riemannian_turtle = reload(riemann_lsystem.riemannianturtle)
import riemann_lsystem.lineintersection as li
reload(li)

from riemann_lsystem.lineintersection import *
from riemann_lsystem.surfaces import *
from riemann_lsystem.riemannianturtle import *

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

seed(0)

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
ra = 1. * meter   # Radius of the sphere in meter
rb = 0.5 * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################

# Flags to control the display
PLOTSPACE = True

space = EllipsoidOfRevolution(ra,rb)

# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 4 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 1. * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

LINETO_MAXITER = 30

origin_pt = [0.0, 0.0]    # in (u,v) coordinates

dt = 0.1           # sec

# Managing the discretization of MT segments
DL = 10 * cm       # size of segment that are synthesized or depolymerized (no physical meaning, just quantization)
N = 20             #  Number of initial segments of size DL


PolRate = 0.5      # cm/sec
DepRate = 0.5      # cm/sec

#For viza-ualization of MT disapearing
CRate = 0.01
CThreshold = 0.01
CRInit = 0.05
MaxIncidenceAngle = 45 # degrees. max deflection angle (if higher, no deflection)

K = 3              # try 1,2,3, 10,100,1000 : number of microtubules

# Set of trajectories already existing since the beginning of the simulation
trajectories = LineSet()
#trajectories.setSpace(space)
#LINE_ID = 0

# TEST selection
TEST = 1   # 1 : simulate K MT segments in random positions
           # 2 : test intersection with a line from different azimuths

#def get_new_line_id():
#  global LINE_ID
#  LINE_ID += 1
#  return LINE_ID

def intersection_energy(u,v):
  return trajectories.nb_bboxes((u,v))

def StartEach():
   return 
   print()
   for id, line in trajectories.lines.items():
      print(id,line)
   print()
   for id, bbx in trajectories.bvh.items():
      print(id,bbx)

# A MT segment is made of
# - a B end (tail, where depolymerization occurs)
# - a series of S segments
# - a A end (head, where polymerization occurs)
# a ?T() module is systematically inserted between these modules so that the turtle state 
# computed at the last interpretation is accessible in rules


Axiom:
  global origin_pt, trajectories
  nproduce SetSpace(space)
  nproduce ;(0)PlotSpace
  trajectories.setSpace(space)
  # Warning, plotting the intersection energy at each step is quite time consuming.
  #nproduce ;(0)PlotSpace(intersection_energy)
  #turtle_init = origin_pt + [0., 1.] # (u0,v0,p0,q0) needed to initialize the turtle on the surface
  nproduce ;(1)_(LINEWIDTH)
  if TEST == 1: # K segments randomly placed
    for k in range(K):
      nproduce [
      alpha = random() * 360
      origin_pt[0] = random()*2*np.pi
      origin_pt[1] = - np.pi/2 + random()*np.pi
      turtle_init = origin_pt + [0., 1.]
      nproduce InitTurtle(turtle_init)
      nproduce +(alpha)
      nproduce B(0, 0)
      for i in range(N):
        # S(path_length, path_origin, path_sequence, line_id)
        # If path_sequence is not specified, then S it will be computed by a F
        # If path_sequence is specified, it will be displayed by a P
        pdic = ParameterSet()
        pdic['seg_size'] = DL
        pdic['uvpq_s'] = {}
        nproduce S(pdic)?T(ParameterSet())
        #new_line_id = get_new_line_id()
        #nproduce S(DL,{},get_new_line_id())?T(ParameterSet())
      nproduce A(0, 0)
      nproduce ]
      
  elif TEST == 2: # K segments positionned at different azimuthal orientation with respect to a horizontal segment pointing to a central line
    # horizontal segment 
    nproduce [InitTurtle([0,0,0,1]);(5)@O(0.03)]
    origin_pt = [-np.pi/6,0.]
    turtle_init = origin_pt + [1., 0]
    nproduce InitTurtle(turtle_init)
    #for i in range(10):
    # S(path_length, path_origin, path_sequence, line_id)
    #new_line_id = get_new_line_id()
    #print(new_line_id)
    #nproduce S(DL*10,{},new_line_id)?T(ParameterSet())
    pdic = ParameterSet()
    pdic['seg_size'] = DL*10
    pdic['uvpq_s'] = {}
    nproduce S(pdic)?T(ParameterSet())

    # segments pointing toward the horizontal segment
    rad = 0.9
    
    # TESTS:
    # PERIODIC_COORD_NORMALIZATION at True (problem of extra small detections after the first one which is Ok)
    # PERIODIC_COORD_NORMALIZATION at False (problem of undetected segments)
    # Select here a segment id to test (one at a time) in 0, K
    activated_id = 9
    
    alpha = np.linspace(0, 360, K+1)
    turtle_init = [0,0,0,1]
    nproduce InitTurtle(turtle_init)
    for k in range(K+1):
      nproduce [
      nproduce +(alpha[k])f(rad)
      # computes vectors in cov basis coordinates to point toward the horizontal line
      nproduce [;(4)@O(0.03)]
      epsilon =  -5 * np.sin(np.deg2rad(alpha[k]))
      nproduce +(180+epsilon)
      #nproduce [nproduce _(0.01);(2)DrawVectpq(v,0.5)]
      if k == activated_id:
        nproduce B(0, 0)
        for i in range(N):
          # S(path_length, path_origin, path_sequence, line_id)
          # If path_sequence is not specified, then S it will be computed by a F
          # If path_sequence is specified, it will be displayed by a P
          #new_line_id = get_new_line_id()
          #print(new_line_id)
          #nproduce S(DL,{},new_line_id)?T(ParameterSet())
          pdic = ParameterSet()
          pdic['seg_size'] = DL
          pdic['uvpq_s'] = {}
          nproduce S(pdic)?T(ParameterSet())

        nproduce A(0, 0)
      nproduce ]
    
    
# in the contextual rules, ignore turns made when there is an intersection
ignore: +

derivation length: 1000
production:

# Polymerization at the + end (A)
# an A polymerizes at a rate PolRate and creates a segment as soon as its size reaches PolDL.
# the length being constructed is stored in a buffer in the state of A: pol_lenbuff
?T(tstate) < A(t, pol_lenbuff):
  pol_lenbuff += PolRate * dt
  if pol_lenbuff >= DL:
    # The MT should create a segment of length pol_lenbuff (> DL).
    # This is possible if no intersections with other segments are detected in creating this new segment.
    
    # Otherwise some rules of interaction will need to be applied
    
    # Compute the potential 'forward' path of size pol_lenbuff
    uvpq_s = forward(tstate,DL, MAXSTEPLEN)
    # Note: uvpq_s does not contain the current position of the turtle
    #print("forward : ", uvpq_s)
    
    # Construct the corresponding line made of uv coords
    # 1. The turtle has current coordinates uvpq
    curpos = [(tstate.uvpq[0],tstate.uvpq[1])]
    # 2. including current postion in front of the uv coords of the uvpq_s path returned by formard
    uvs = curpos+[(s[0],s[1]) for s in uvpq_s]
    
    # 3. Test the possible intersection of this potential line with 
    # already existing MTs stored in the global object trajectories
    intersection = trajectories.test_intersection(uvs)
    # print(intersection,uvs)
    
    # intersection is False if no intersection were detected
    # otherwise returns an enumerate containing:
    #    0: index of the point id before intersection in list uvs, 
    #    1: (subline_id, point_id) corresponding to the index of the subline and the point id before intersection of the intersected line,
    #    2: line id with which it intersects
    #    3: found intersection point exact coordinates
    
    #print(trajectories.lines)
    #print("LENGTH TRAJECTORIES: ", len(trajectories.lines))
    
    if not intersection:
      line_id = trajectories.add_line_from_point(tstate.uvpq,uvs) 
      uvpq = tstate.uvpq
      uvpq_t = [uvpq] + uvpq_s # Adding the current turtle position 
                               # in front of uvpq_s to compute the path length
      #uvpq_t = tstate.space.normalize_toric_coords(uvpq_t)
      #print('uvpq', uvpq)
      #print('uvpq_s', uvpq_s)
      #print('uvpq_t', uvpq_t)
      pathlen = tstate.space.path_length(uvpq_t)
      #nproduce S(lpath, uvpq, uvpq_s, get_new_line_id())?T(ParameterSet())
      #nproduce S(pathlen, { 'uvpq' : uvpq_s }, line_id)?T(ParameterSet())
      pdic = ParameterSet()
      pdic['seg_size'] = DL
      pdic['uvpq_s'] = { 'uvpq' : uvpq_s }
      pdic['line_id'] = line_id
      nproduce S(pdic)?T(ParameterSet())
      produce A(t+dt,pol_lenbuff-DL)
    else:
      #print('############### INTERSECTION DETECTED ! ##################')
      #print(intersection)
      # determine the position (u1,v1) and (p1,q1) of the segment at the intersection:
      # intersection[0] is the index of the point before intersection in the list uvpq_s
      if intersection[0] >= 0:
        # there is a shift by one index between lists uvs and uvpq_s
        uv1 = uvpq_s[intersection[0]][:2]   # first two elements of uvpq
        pq1 = uvpq_s[intersection[0]][-2:]  # last two elements of uvpq
      else:
        uv1 = tstate.uvpq[:2]
        pq1 = tstate.uvpq[-2:]
      
      #print("\tPoint uvpq on intersecting line:", uv1,pq1)
      
      # position uv2 and pq2 of the segment at the intersection:
      # uv2 first:
      intersected_line_id = intersection[2]        
      linepoints = trajectories.line_points(intersected_line_id) # linepoint is a list of sublines which contain a list of points
      #print("\tintersected linepoints",linepoints)
      intersected_subline_id = intersection[1][0]
      intersected_point_id_in_subline = intersection[1][1]
      intersected_uvs = linepoints[intersected_subline_id][intersected_point_id_in_subline]
            
      # then, pq2:
      #(p2,q2) = intersected_uvs[intersection[1]] # NOT AVAILABLE in LineSet for the moment !! 
      # --> use the difference between consecutive points, which defines the direction in this plane
      intersected_uvs2 = linepoints[intersection[1][0]][intersection[1][1]+1] # [intersection[1]+1]
      pq2estimated = intersected_uvs2 - intersected_uvs
      
      #print("\tPoint uvpq on intersected line :", intersected_uvs, pq2estimated)
      
      # The two points (u1,v1) and (u2,v2) being in general different, 
      # one cannot use the scalar products from the surface (that depends on uv).
      # We thus retreive the intersection point (ui,vi) of the two segments to execute a scalar product 
      # in a common tangent plane.
      (ui,vi) = intersection[3]
      
      #print("\tPoint uvpqi :", (ui,vi))
      
      # COMPUTE incident angle alpha
      # We can now dot product pq1 and pq2 estimated in this tangent plane:
      sprod = tstate.space.dot_product(ui,vi,pq1,pq2estimated)
      #print("\tscalar product =  ", sprod)
      sgn1 = np.sign(sprod)
      
      #compute the normed of the two vectors
      n1 = tstate.space.norm(ui,vi,pq1)
      n2 = tstate.space.norm(ui,vi,pq2estimated)
      
      # extract the angle of the two vectors
      alpha = np.arccos(sprod/(n1*n2)) # is a positive number
      alpha = np.rad2deg(alpha)
      if alpha > 90:
        alpha = 180-alpha
      #print("\t--> (small) incident angle  = ", alpha)
      
      vec_0 = tstate.space.pushforward(ui,vi,pq2estimated) 
      vec = tstate.space.pushforward(ui,vi,pq1)              # tgt vec of the intercepted line
      #vec = tstate.space.pushforward(ui,vi,tstate.uvpq[-2:])   # tgt vec of the current (intercepting) line
      
      #print("\tpq1 = ", pq1)
      #print("\tpql2= ", tstate.uvpq[-2:])
      #vectorial product
      prodvec = np.cross(vec,vec_0)
      
      #print("\tvector product =  ", prodvec, vec, vec_0)
      sgn2 = np.sign(np.dot(prodvec, tstate.space.normal(ui,vi)))
      
      sgn = sgn1 * sgn2
      #print("\t sgn final: ", sgn, "sgn scalar prod: ", sgn1, "sgn cross prod: ", sgn2)
      # comparison of the orientation of this vector with the normal direction on the surface at that point
      # print(prodvec)
      #epsilon = 1
      
      #nproduce [nproduce _(0.01);(2)DrawVectpq(pq1,0.5)]
      #nproduce [nproduce _(0.01);(6)DrawVectpq(pq2estimated,5.5)]
      
      if not np.isclose(sgn,0): # the incidence angle is not 0
        if abs(alpha) < MaxIncidenceAngle:
          # rotate according to the incidence angle
          #if not np.isclose(incident_angle,0.):
          nproduce +(sgn * alpha)?T(ParameterSet())
        
      produce A(t+dt,pol_lenbuff)
  else:
    nproduce A(t+dt,pol_lenbuff)

# Depolymerization at the - end (B)
# The problem is that if depolymerization is rapid, in dt it can do much more than DL
# and in this case unstacking one element is not enough to meet what is needed by 
# the depolymerisation rate.
# So for this, decomposition rules are needed. They will make it possible to empty
# the dep_length buffer when it augments by eating (depolymerizing) more than one segment
# during the same dt step. See below.

B(t, dep_lenbuff)S(pdic)?T(tstate):
  #print("dep_lenbuff", dep_lenbuff)
  dl = pdic['seg_size']
  uvpq_s = pdic['uvpq_s']
  if 'line_id' in pdic:
    line_id = pdic['line_id']
  else:
    assert False
  dep_lenbuff += DepRate * dt
  if dep_lenbuff >= DL:
    uvpq = tstate.uvpq
    trajectories.remove_line(line_id)
    nproduce InitTurtle(uvpq)
    nproduce B(t+dt, dep_lenbuff-dl)
  else:
    nproduce B(t+dt, dep_lenbuff)S(pdic)?T(ParameterSet())

B(t1, dep_lenbuff) A(t2, pol_lenbuff):
  produce C(0, CRInit)

C(t,r):
  if r < CThreshold:
    produce
  else:
    r -= CRate *dt
    produce C(t+dt,r)

decomposition:
maximum depth: 1000

# REGLE POUR ELIMINER LES + rajoutés en cas d'intersection
# Peut etre enlevee ...
B(t, dep_lenbuff)+(alpha)?T(tstate):
  #print("dep_lenbuff", dep_lenbuff)
  uvpq = tstate.uvpq
  nproduce InitTurtle(uvpq)
  nproduce B(t+dt, dep_lenbuff)

# Decomposition rule to empty the dep_lenbuffer before the next step
# and remove as many segments as necessary (maximum imposed by maximum depth variable)

B(t, dep_lenbuff)S(pdic)?T(tstate):
  dl = pdic['seg_size']
  uvpq_s = pdic['uvpq_s']
  if 'line_id' in pdic:
    line_id = pdic['line_id']
  else:
    assert False
  #print("decomposition:", dep_lenbuff)
  if dep_lenbuff >= DL:
    uvpq = tstate.uvpq
    trajectories.remove_line(line_id)
    # the following rule does not seem required. But keep it and check why exactly
    nproduce InitTurtle(uvpq)  
    nproduce B(t, dep_lenbuff-dl)


interpretation:

A(t,pol_lenbuff):
  produce ;(2)@O(0.03)
  
B(t,dep_lenbuff):
  nproduce ;(3)@O(0.03)

C(t,r):
  produce ;(6)@O(r)

S(pdic): 
  global trajectories
  dl = pdic['seg_size']
  uvpq_s = pdic['uvpq_s']
  if uvpq_s == {} and dl > 0:
    uvpq_s2 = forward(turtle,dl,MAXSTEPLEN)
    uvs = [(s[0],s[1]) for s in uvpq_s2]
    # As the line was not created in the LineSet() object, create it now with the previouly defined given line_id 
    line_id = trajectories.add_line_from_point(turtle.uvpq,uvs)
    pdic['line_id'] = line_id
    StartEach()
    #print("\t ... adding trajectory", line_id, turtle.uvpq, uvs)
    # A P (Path) is like a F but is given the sequence of segments to draw
    uvpq_s['uvpq'] = uvpq_s2
    produce P(uvpq_s2)
  else:
    produce P(uvpq_s['uvpq'])

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	pinfunc = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.05, 1),(0.0606061, 0.663636, 1),(0.329545, 0.213636, 1),(0.725758, 0.131818, 1),(1, 0.118182, 1)]) , 
	    )
	pinfunc.name = "pinfunc"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': False},[('Function',pinfunc)])
	parameterset = [panel_0,]
	context["__functions__"] = [('pinfunc',pinfunc),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["pinfunc"] = pgl.QuantisedFunction(pinfunc)
