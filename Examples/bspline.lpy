from openalea.plantgl.all import *

# Lane and Riesenfeld algo for generating BSpline with subdivision


import numpy as np
from math import ceil
from random import random

from importlib import reload

import riemann_lsystem
import riemann_lsystem.surfaces
surfaces = reload(riemann_lsystem.surfaces)
import riemann_lsystem.riemannianturtle
riemannian_turtle = reload(riemann_lsystem.riemannianturtle)

from riemann_lsystem.surfaces import *
from riemann_lsystem.riemannianturtle import *

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

points = [(0,0),(0,1),(1,1),(1,0.1),(2,0),(1,-0.1),(1,-1),(0,-1),(0,0)]
points = [(p.x,p.y) for p in curve.ctrlPointList]

Axiom: 
  sphere = Sphere(5)
  nproduce SetSpace(sphere) Init
  nproduce ;(0) PlotSpace 
  nproduce InitTurtle([points[0][0],points[0][1],1,0]) 
  nproduce [,(5)_(0.05) [,(3)@O(0.2)]
  for pt in points[1:]:
    print(pt)
    nproduce RiemannLineTo(pt,10) [,(3)@O(0.2)]
  nproduce ]
  nproduce  ,(2)_(0.1)@Gc() S(1) 



def StartEach():
  pass

# derivation length = degree of the b-spline (try 1,2,...,8)
derivation length: 2  
production:

S(d) --> S(d+1)

interpretation:

S(d):
  nproduce BSplineSubdivision(points, d)

endlsystem

###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_5 = pgl.Material("Color_5" , ambient = (0,0,0) , diffuse = 40 , )
	Color_5.name = "Color_5"
	context.turtle.setMaterial(5,Color_5)
	scalars = [('DEGREE', 'Integer', 2, 1, 6), ('DERIVATION', 'Integer', 3, 1, 20), ('POINTS', 'Bool', True), ('GEODESICDISTANCE', 'Bool', True)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	curve = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.763601, 0.0753145, 1),(-0.273579, 0.224159, 1),(-0.285018, -0.301258, 1),(0.039332, -0.633257, 1),(0.324689, 0.401889, 1),(0.672299, -0.18148, 1),(0.747462, 0.182907, 1)]) , 
	    stride = 42 , 
	    )
	curve.name = "curve"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': True},[('Curve2D',curve)])
	parameterset = [panel_0,]
	context["__functions__"] = []
	context["__curves__"] = [('curve',curve),]
	context["__parameterset__"] = parameterset
	context["curve"] = curve
__references__ = 'Przemyslaw Prusinkiewicz, Mitra Shirmohammadi, and Faramarz Samavati. L-systems in Geometric Modeling. Proceedings of the Twelfth Annual Worskshop on Descriptional Complexity of Formal Systems, pp. 3-12, 2010. '
