"""
	L-systems in Riemannian geometry
	
		Author: Ch. Godin, Inria
		Date: 2019-2020
	Simulates geodesics on a sphere with a riemannian implementation of 
	the main turtle primitives: F, f, + and -
	
	- Draw a triangle with angles = 90 degs and side is a variable: 
	  length_geodesic = L, nb_seg = 10

"""

%pastefile riemannian_turtle.lpy

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0 
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 1/2. * meter   # Radius of the sphere in meter
r = 0.3 * meter

#######################
# DISPLAY PARAMETERS
#######################

# Flags to control the display
PLOTSPACE = True

# maximum len of subdivision step required to draw any line on the surface 
# this controls the resolution of the geodesic plot with respect to the 
# surface curvature 
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 0.5 * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################
# Surface parameters
R = 1/2. * meter   # Radius of the sphere in meter
side_len = 1.2

Axiom: 
  # Sets the Riemannian space in which the turtle will move
  nproduce SetSpace(Sphere(R))
  nproduce InitTurtle([0,0,1,0])
  nproduce ;(6)F(side_len)-(120)F(side_len)-(120)F(side_len)

derivation length: 4
production:

F(x):
  nproduce F(x/3.)+(60)F(x/3.)-(120)F(x/3.)+(60)+F(x/3.)



interpretation:

A:
  produce _(FRAMEWIDTH)Frame(FRAMESIZE)


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_0 = pgl.Material("Color_0" , transparency = 0.44 , )
	Color_0.name = "Color_0"
	context.turtle.setMaterial(0,Color_0)
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	pinfunc = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.05, 1),(0.0606061, 0.663636, 1),(0.329545, 0.213636, 1),(0.725758, 0.131818, 1),(1, 0.118182, 1)]) , 
	    )
	pinfunc.name = "pinfunc"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': False},[('Function',pinfunc)])
	parameterset = [panel_0,]
	context["__functions__"] = [('pinfunc',pinfunc),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["pinfunc"] = pgl.QuantisedFunction(pinfunc)
__references__ = '# '
