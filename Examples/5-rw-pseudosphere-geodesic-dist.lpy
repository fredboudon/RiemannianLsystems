"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2020

   Illustrate a random walk on a pseudosphere
"""

import numpy as np
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
from math import ceil
from random import random, seed

# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
import sys
sys.path.append("../RiemannTurtleLib")

from importlib import reload

import surfaces
surfaces = reload(surfaces)
import riemannianturtle
riemannian_turtle = reload(riemannianturtle)

from surfaces import *
from riemannianturtle import *

%pastefile ../RiemannTurtleLib/riemannianrules.lpy

# Flags to control the display
PLOTSPACE = True

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Width to draw the geodesics
LINEWIDTH  = 1. * cm

#######################
# DISPLAY PARAMETERS
#######################

extern(NBSTEPS = 80)
extern(WALKS = 100)

# Surface parameters
R = 2. * meter   # Radius of the sphere in meter

# OUTPUT
distance = None
slen = 1/7. # to be homogeneous with the Sphere radius 7. 

# can draw a dashed geodesic to show how f is acting
# for 1-segment geodesic --> set this value at 2 (1 seg drawn, 1 not drawn)
origin_pt = [2.0,0.0]

# LineTo parameters
LINETO_MAXITER = 20
NB_POINTS = 20

# Temporary global value
Nstep = 0

# Arrays for result
geodesicLen = np.zeros(WALKS)
geodesicMean = np.zeros(NBSTEPS)
geodesicStd = np.zeros(NBSTEPS)
geodesicVar = np.zeros(NBSTEPS)

def StartEach():
  geodesicLen=np.zeros(WALKS)
  print("**** STEP ", Nstep)

def EndEach():
  global geodesicLen
  # filtering the indefined distance values (-1)
  posvals = geodesicLen >= 0.0
  geodesicLen = geodesicLen[posvals]
  print("Step ", Nstep, " filtered ", WALKS - len(geodesicMean))
  
  geodesicMean[Nstep] = np.mean(np.power(geodesicLen,2))
  geodesicStd[Nstep] = np.std(np.power(geodesicLen,2))
  geodesicVar[Nstep] = np.var(np.power(geodesicLen,2))
  
  geodesicLen = np.zeros(WALKS)


def End():
    #plt.clf()
    #plt.plot(geodesicMean, 'ro')
    #plt.fill_between(geodesicMean+geodesicStd, geodesicMean-geodesicStd, facecolor='blue', alpha=0.5)
    x = np.arange(0,NBSTEPS,1)
    plt.errorbar(x,geodesicMean, yerr=geodesicStd, fmt='.k');
    plt.xlabel('Time')
    plt.ylabel('Mean squared geodesic length')
    plt.title(f'MSGD for a sphere of radius {R:.2f}')
    plt.grid(True)

    plt.show()
    #plt.savefig('MSGDr4n80w800')

Axiom: 
  # Sets the Riemanian space in which the turtle will move
  nproduce SetSpace(PseudoSphere(R))
  nproduce ;(0)PlotSpace(dict(CCW = False))
  turtle_init = origin_pt + [1., 1.1]
  nproduce InitTurtle(turtle_init)
  nproduce ;(4)@O(0.02);(6)_(LINEWIDTH)
  for w in range(WALKS):
    nproduce [A(w,0)]


derivation length: NBSTEPS
production:

A(w,n):
  global Nstep
  Nstep = n
  a = 360*random()
  nproduce +(a)F(slen)A(w,n+1)
  #if getIterationNb() == __lsystem__.derivationLength-1:
  #  nproduce [;(3)RiemannLineTo(origin_pt,NB_POINTS)]

interpretation:

A(w,n):
  global distance
  #print('A(w,n)=',w,n)
  # produce _(FRAMEWIDTH) Frame(FRAMESIZE)
  #if getIterationNb() == __lsystem__.derivationLength-1 :
  # print("NBSTEPS = ", getIterationNb())
  ut,vt,pt,qt = turtle.uvpq
  u, v = origin_pt[0], origin_pt[1]
  if n == 0:
    distance = 0.0
    errorval = 0
  else:
    distance,errarray, errorval = geodesic_distance_to_point(turtle.space,(u,v),(ut,vt), nb_points = NB_POINTS, max_iter= LINETO_MAXITER)
    i = 0
    while errorval != 0 and i < 0:
      i += 1
      # try to change parameters to compute the distance again:
      print("Distance computation did not converge, retry ...,")
      distance,errarray, errorval = geodesic_distance_to_point(turtle.space,(u,v),(ut,vt), nb_points = max(NB_POINTS-3*i,4), max_iter= LINETO_MAXITER)
      if errorval == 0:
        pass # print(' Found for nb_points = {max(NB_POINTS-3*i,4):d}!!')
    #print(f"GeodesicDist(({u:.2f},{v:.2f}),({ut:.2f},{vt:.2f}) ) = {distance:.3f}")
  if errorval == 0 or errorval == 3:
    geodesicLen[w] = distance
    if errorval == 3:
      pass #print("Error 3: difference between last and initial value = ", errarray[-2]-errarray[0])
  else:
    geodesicLen[w] = -1   # an error prevented to computed a reliable distance
  
  produce ;(2)@O(0.02)

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__references__ = '#'
