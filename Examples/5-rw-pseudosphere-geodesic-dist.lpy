"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2020

   Illustrate a random walk on a pseudosphere
"""

import numpy as np
from math import ceil
from random import random, seed

# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
import sys
sys.path.append("../RiemannTurtleLib")

from importlib import reload

import surfaces
surfaces = reload(surfaces)
import riemannianturtle
riemannian_turtle = reload(riemannianturtle)

from surfaces import *
from riemannianturtle import *

%pastefile ../RiemannTurtleLib/riemannianrules.lpy

# Flags to control the display
PLOTSPACE = True

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 1. * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################

extern(NBSTEPS = 150)

# OUTPUT
distance = None

# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 0.3 * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

# Tighten the nec of the pin form structure to see that the geodesic 
# at some threshold is doomed to stay in the lower part and cannot reach the other part
nb_seg = 10 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

#seed(0)
slen = 0.1 # 0.1
origin_pt = [2.0,0]

LINETO_MAXITER = 25
NB_POINTS = 20

#def End():
#   turtle = execContext().turtle

Axiom: 
  # Sets the Riemanian space in which the turtle will move
  nproduce SetSpace(PseudoSphere(R))
  nproduce ;(0)PlotSpace(dict(CCW = False))
  turtle_init = origin_pt + [1., 1.1]
  nproduce InitTurtle(turtle_init)
  nproduce ;(6)_(LINEWIDTH)[;(4)@O(0.02)]A(0)

derivation length: NBSTEPS
production:

A(n):
  a = 360*random()
  nproduce +(a)F(slen)A(n+1)
  if getIterationNb() == NBSTEPS-2:
    nproduce [;(3)RiemannLineTo(origin_pt,NB_POINTS)]

interpretation:

A(n):
  global distance
  # produce _(FRAMEWIDTH) Frame(FRAMESIZE)
  if getIterationNb() == __lsystem__.derivationLength-1 :
    print("NBSTEPS = ", getIterationNb())
    ut,vt,pt,qt = turtle.uvpq
    u, v = origin_pt[0], origin_pt[1]
    distance,errarray = turtle.space.geodesic_distance((u,v),(ut,vt), nb_points = NB_POINTS, max_iter= LINETO_MAXITER)
    if errarray == []:
      print("Distance could not be computed, DISCARD THIS SIMULATION ...")
      distance = np.inf
    else:
      print(f"GeodesicDist(({u:.2f},{v:.2f}),({ut:.2f},{vt:.2f}) ) = {distance:.3f}")
  produce ;(2)@O(0.02)

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__references__ = '#'
