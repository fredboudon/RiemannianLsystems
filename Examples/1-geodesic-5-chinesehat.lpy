"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2022

	- Chinese hat (using a tractrix as the generator of a surface of revolution 

"""

import numpy as np
from math import ceil
from random import random

# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
from importlib import reload

import riemann_lsystem.surfaces
surfaces = reload(riemann_lsystem.surfaces)
import riemann_lsystem.riemannianturtle
riemannian_turtle = reload(riemann_lsystem.riemannianturtle)

from riemann_lsystem.surfaces import *
from riemann_lsystem.riemannianturtle import *

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

# Flags to control the display
PLOTSPACE = True

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 1. * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################


# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 1.5 * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

# Pseudo sphere radius
radius = 1.

# Tighten the nec of the pin form structure to see that the geodesic 
# at some threshold is doomed to stay in the lower part and cannot reach the other part
nb_seg = 10 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

length_geodesic = 3.5 

AXIOMTEST = 2

Axiom: 
  # Sets the Riemanian space in which the turtle will move
  #nproduce SetSpace(PseudoSphere(radius, zmin = 0.1, zmax = radius-0.001))
  dictarg = {'CCW' : False}
  nproduce SetSpace(ChineseHat(radius, zmin = 0.1, zmax = radius-0.001), dictarg)
  nproduce ;(0)PlotSpace
  nproduce _(LINEWIDTH)
  if AXIOMTEST == 1:
    # test 1: Parallel geodesics from close points
    # first group
    nproduce [;(1)InitTurtle([0,0.15,0.5,0.5])A(0)]
    # geodesique parallele
    nproduce [;(2)InitTurtle([0.05,0.15,0.5,0.5])A(0)]
    # second group
    nproduce [;(3)InitTurtle([0,0.15,0.1,0.9])A(0)]
    # geodesique parallele
    nproduce [;(4)InitTurtle([0.05,0.15,0.1,0.9])A(0)]
    # third group
    nproduce [;(5)InitTurtle([0,0.15,0.7,0.3])A(0)]
    # geodesique parallele
    nproduce [;(6)InitTurtle([0.05,0.15,0.7,0.3])A(0)]
  elif AXIOMTEST == 2:
    #test 2: several geodesics from one point
    nb = 6
    a = np.pi/20 # to orient the turtle's head at the beginning
    for i in range(nb):  
      b = np.pi/2-0.1 - a * i
      nproduce [;(1+i)InitTurtle([0,0.15,np.cos(b),np.sin(b)])A(0)]


derivation length: int(nb_seg)
production:

A(n):

  nproduce F(length_geodesic/nb_seg)
  nproduce A(n+1)

interpretation:

A(n):
  u,v,p,q = turtle.uvpq 
  K,H,kmin,kmax = turtle.space.localCurvatures(u,v)
  print("Courbures: Gauss = ", "{:.3f}".format(K), \
  ", Mean = ", "{:.3f}".format(H), \
  ", (kmin,kmax)= ", "{:.3f}, {:.3f}".format(kmin,kmax))
  produce _(FRAMEWIDTH)Frame(FRAMESIZE)


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__references__ = '#'
