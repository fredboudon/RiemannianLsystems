"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2020
		
	Simulates geodesics on a pseudo sphere 

   FIXME: The normals of the pseudo sphere and of the turtle segments seem inconsistent between them. Check this
"""

import numpy as np
from math import ceil
from random import random

# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
import sys
sys.path.append("../RiemannTurtleLib")

from importlib import reload

import surfaces
surfaces = reload(surfaces)
import riemannianturtle
riemannian_turtle = reload(riemannianturtle)

from surfaces import *
from riemannianturtle import *

%pastefile ../RiemannTurtleLib/riemannianrules.lpy


# Flags to control the display
PLOTSPACE = True

TEST1 = False
TEST2 = True

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 1. * meter   # Radius of the pseudosphere in meter

#######################
# DISPLAY PARAMETERS
#######################


# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 1. * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

# Tighten the nec of the pin form structure to see that the geodesic 
# at some threshold is doomed to stay in the lower part and cannot reach the other part
nb_seg = 10 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

length_geodesic = 3.5 

#Select Axiom here
AXIOMTEST = 2

Axiom: 
  # Sets the Riemanian space in which the turtle will move
  # u = control of z (the bigger u the highest z (warning it is not directly z)
  # v = azimuth
  nproduce SetSpace(PseudoSphere(R, zmin = -3, zmax = 3),None)
  nproduce _(LINEWIDTH)

  if AXIOMTEST == 1:
    # test the passage through the pseudosphere rim
    nproduce [;(2)InitTurtle([1.,0.0,-1,0.])A(0)]
  elif AXIOMTEST == 2:
    # geodesic familly with increasing initial bending
    nproduce [;(2)InitTurtle([0.1,0.0,1,0.])A(0)]
    nproduce [;(3)InitTurtle([0.1,0.0,0.98,0.02])A(0)]
    nproduce [;(4)InitTurtle([0.1,0.0,0.97,0.03])A(0)]
    nproduce [;(5)InitTurtle([0.1,0.0,0.95,0.05])A(0)]
    nproduce [;(6)InitTurtle([0.1,0.0,0.94,0.06])A(0)]
    nproduce [;(7)InitTurtle([0.1,0.0,0.935,0.065])A(0)]
  else:
    nproduce [;(2)InitTurtle([0.1,0.0,1,0.])A(0)]
  
derivation length: int(nb_seg)
production:

A(n):
  #global turtle
  nproduce F(length_geodesic/nb_seg)
  nproduce A(n+1)

interpretation:

A(n):
  u,v,p,q = turtle.uvpq 
  
  if TEST1:
	  # Test: computed numerical coef o the fundamental forms I and II
	  E,F,G,L,M,N = turtle.space.fundFormCoef(u,v)
	  
	  # theoretical values of E,F,G,L,M,N:
	  EE = (R*np.tanh(u))**2
	  FF = 0
	  GG = (R/np.cosh(u))**2
	  
	  LL = -R*np.sinh(u)/(np.cosh(u)**2)
	  MM = 0
	  NN = -R*(1/np.cosh(u))*np.tanh(u)
	  
	  print("  {:.3f},{:.3f},{:.3f},{:.3f},{:.3f},{:.3f}".format(E,F,G,L,M,N) )
	  print("  {:.3f},{:.3f},{:.3f},{:.3f},{:.3f},{:.3f}".format(EE,FF,GG,LL,MM,NN))
	  
  if TEST2:
    K,H,kmin,kmax = turtle.space.localCurvatures(u,v)
    print("Courbures: Gauss = ", "{:.3f}".format(K), \
    ", Mean = ", "{:.3f}".format(H), \
    ", (kmin,kmax)= ", "{:.3f}, {:.3f}".format(kmin,kmax))
  produce _(FRAMEWIDTH)Frame(FRAMESIZE)


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_7 = pgl.Material("Color_7" , ambient = (32,255,255) , diffuse = 0.627451 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__references__ = '#'
