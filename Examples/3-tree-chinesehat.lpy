"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2022

    Draw a tree on a chinese hat.

"""

import numpy as np
from math import ceil
from random import random

# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
import sys
sys.path.append("../RiemannTurtleLib")

from importlib import reload

import surfaces
surfaces = reload(surfaces)
import riemannianturtle
riemannian_turtle = reload(riemannianturtle)

from surfaces import *
from riemannianturtle import *

%pastefile ../RiemannTurtleLib/riemannianrules.lpy

# Flags to control the display
PLOTSPACE = True

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 2. * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################


# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 4. * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

# Tighten the nec of the pin form structure to see that the geodesic 
# at some threshold is doomed to stay in the lower part and cannot reach the other part
nb_seg = 10 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

slen = 0.2

# Tree parameter
angle = 45

# Length and step of the path
LENGTH = 2* np.pi *R               # length on the surface of the drawn geodesic path (in a.u.)
STEPSIZE = 0.09     # size of a step (in a.u.) used to draw pieces of geodesic
LINEWIDTH = 0.05
LEAVES = True
ROTATELEAF = False


def length(n):
  return 4*STEPSIZE - 4*n * STEPSIZE/10.

Axiom: 
  # Sets the Riemanian space in which the turtle will move
  nproduce SetSpace(ChineseHat(R, zmin=0.1,zmax= 2))
  nproduce ;(0)PlotSpace
  nproduce ;(3)InitTurtle([0,0.1,-0.7,1])
  nproduce ;(6)_(LINEWIDTH)A(0)
 
derivation length: 7
production:

A(n):
  # branching angle
  if n % 2 == 0:
    ba = -angle
    la = 30
  else:
    ba = angle
    la = -30
  
  nproduce F(1.0) [+(ba)
  if LEAVES:
    nproduce [L(la,0)]
  nproduce A(n+1)]
  nproduce A(n+1)

L(la,n):
  if n > 5:
    produce
  else:
    produce L(la,n+1)

interpretation:

A(n):
  produce ;(2)@O(0.1)
  #if FRAME: nproduce _(0.01)Frame(0.2)

L(la,n):
  if n == 0:
    produce
  if ROTATELEAF:
    turn = np.copysign(90,la)
  else:
    turn = 0
  produce ;(2)-(la)/(turn)~l(1.0)



endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__references__ = '#'
