# Figure 24b: Modeling tropism using abstract Riemannian spaces. 

# (TEST=1) simple branching system in a Euclidean plane. (TEST=2) same branching system interpreted in a Beltrami-Poincaré half plane. This simulates a form of "gravity attraction" of the branches. (TEST=3) abstract Riemannian space with point-like source of metric distorsion, simulating shadow-avoiding behaviour of trees.



%pastefile ../src/riemann_lsystem/riemannianrules.lpy
import numpy as np


######################################
# DEFINITION OF THE METRIC (INTRINSIC)
######################################

######################################################
extern(FIELD_STRENGTH = 1) # 0 is no field, 1. is max field

# Euclidean metric (Halfplane PoinCaré-Beltrami)
euclidean_metric = {'g11' : 1, 'g12' : 0, 'g22' : 1}

def hyperbolic(u,v,*args):
    y = 1/(v**2) 
    return y**FIELD_STRENGTH

# Hyperbolic metric (Halfplane PoinCaré-Beltrami)
hyperbolic_metric = {'g11' : hyperbolic, 'g12' : 0, 'g22' : hyperbolic}

alpha = 0.20

# Point source metric (psi) (increasing with radius to the source)
def radial_metric(u,v,source):
    p = np.array((u, v))
    s = np.array(source)
    r = np.linalg.norm(s - p)
    strength = 0.7*FIELD_STRENGTH
    return ( alpha * r**2 * strength + (1-strength) )

point_source_metric = {'g11' : radial_metric, 'g12' : 0, 'g22' : radial_metric }

source = (1.6,1.8)
ilen = 0.5

Axiom: 
  global ilen
  if TEST == 1:
    metric = euclidean_metric
  elif TEST == 2:
    metric = hyperbolic_metric
  elif TEST == 3:
    metric = point_source_metric
    ilen = 0.4
    nproduce S
  nproduce SetSpace(RiemannianSpace2D(**metric, umin = -2.2, umax = 2.2, vmin = 0.12, vmax = 3.3, metric_tensor_params = [source]))
  nproduce ;(0)PlotSpace
  if TEST < 3:
    nproduce PlotDS2(dict(DS2_SCALEFACTOR = 20))
    nproduce InitTurtle([-0.1,0.12,0.15,0.9])
  else:
    nproduce PlotDS2(dict(DS2_SCALEFACTOR = 8))
    nproduce InitTurtle([0.0,0.0,0.0,1])
  
  nproduce ;(6)_(0.009) A(0) @O(0.03)

derivation length: 6
production:

A(n):
  # branching angle
  if n % 2 == 0:  ba = 30
  else: ba = -30
  nproduce StaticF(ilen) [+(ba)A(n+1)] A(n+1)

interpretation:

A(n) --> ;(2)@O(0.02)

S: 
  source3D = [0]
  source3D += source
  #print(source3D)
  produce [MoveTo(source3D);(4)@O(0.1)]

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('TEST', 'Integer', 1, 1, 3)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__references__ = '#'
