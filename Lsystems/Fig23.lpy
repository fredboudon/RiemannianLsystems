# Figure 23: Different geometric embeddings of the same intrinsic von Koch flake curve. 

# A von Koch flake moves progressively from left to right ( in an abstract 2D space where the metric linearly depends on the distance at the origin (small yellow dot). During this move, the flake is deformed by the metric. Geodesics forming the segments close to the origin tend to be strongly curved, thus deforming the entire flake. At the end of the sequence, the metrics becomes more homogeneous over the entire flake, which is less and less distorted.

%pastefile ../src/riemann_lsystem/riemannianrules.lpy
import numpy as np

# DEFINITION OF THE METRIC (INTRINSIC)
# Point source metric : metric generated by a point source

# Point source metric (psi) (increasing with radius to the source)
def radial_metric(u,v,source):
    p = np.array((u, v))
    s = np.array(source)
    return np.linalg.norm(s - p)**1.5

metric_funcs = {'g11' : radial_metric, 'g12' : 0, 'g22' : radial_metric }

# SIMULATION PARAMETERS

source = (0.0,1.)

nbsteps = 100
initx = -1.9
endx = 1
dx = (endx-initx)/nbsteps


Axiom: 
  # Sets the Riemanian space in which the turtle will move
  # choice of functions used to define the intrinsic metric (see above their definition
  nproduce [S] SetSpace(RiemannianSpace2D(**metric_funcs, umin = -2, umax = 2., vmin = -1, vmax = 2.5, metric_tensor_params = (source,)))
  nproduce InitTurtle([initx,0.12,0.9,0.4])  
  nproduce ;(3)_(0.01)G(2,0)-(120)G(2,0)-(120)G(2,0)

derivation length: nbsteps
production:
InitTurtle(v) :
  v[0] += dx
  produce InitTurtle(v)

decomposition:
maximum depth: 4
G(x,o):
  if o == (3 if MAXDEPTH else 2):
    nproduce F(x/3.)+(60)F(x/3.)-(120)F(x/3.)+(60)+F(x/3.)
  else:
     nproduce G(x/3.,o+1)+(60)G(x/3.,o+1)-(120)G(x/3.,o+1)+(60)+G(x/3.,o+1)

interpretation:

A(n) --> _(FRAMEWIDTH) Frame(FRAMESIZE)
S --> [MoveTo([0]+list(source));(4)@O(0.05)]

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_5 = pgl.Material("Color_5" , ambient = (0,0,60) , diffuse = 3 , transparency = 0.69 , )
	Color_5.name = "Color_5"
	context.turtle.setMaterial(5,Color_5)
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	context.options.setSelection('Axiom decomposition',1)
	scalars = [('MAXDEPTH', 'Bool', False)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__references__ = '#'
