%pastefile ../src/riemann_lsystem/riemannianrules.lpy
import numpy as np

ra, rb = 1., 0.5

nbseg = 10
length_geodesic =  10*ra*2*np.pi

angles = [60, 45, 44, 43.3, 43.2, 43, 30, 10]
Axiom:
  # Sets the Riemannian space in which the turtle will move
  nproduce SetSpace(EllipsoidOfRevolution(ra,rb)) ;(0)PlotSpace
  nproduce InitTurtle([0,0,1,0])
  nproduce [;(5)_(0.006)F(ra*2*np.pi)]
  nproduce +(angles[ANGLE_ID]) V # initial direction of the geodesic
  nproduce ;(1)_(0.006)A(0)

derivation length: nbseg
production:

A(n) --> StaticF(length_geodesic/nbseg) A(n+1)

interpretation:
maximum depth: 2

V:
  u,v,p,q = turtle.uvpq
  A = turtle.space.Shift(u,v)
  velocity = A.dot(np.array([p,q]))
  nproduce ;(2)_(0.01)DrawVect(velocity,0.3)

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('ANGLE_ID', 'Integer', 7, 0, 7)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	pinfunc = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.05, 1),(0.0606061, 0.663636, 1),(0.329545, 0.213636, 1),(0.725758, 0.131818, 1),(1, 0.118182, 1)]) , 
	    )
	pinfunc.name = "pinfunc"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': False},[('Function',pinfunc)])
	parameterset = [panel_0,]
	context["__functions__"] = [('pinfunc',pinfunc),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["pinfunc"] = pgl.QuantisedFunction(pinfunc)
