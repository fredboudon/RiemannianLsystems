# Figure 22: Beltrami-Poincaré half plane. 

# (TEST=0) Euclidean half plane with uniform isotropic metric, represented by small discs with equal size at every point of the space (representing them- selves ds2). A geodesic is a straight line. 
# (TEST=1) Beltrami-Poincaré half plane. The metric varies vertically (u2 coordinate), and the geodesic generated at the same point and with the same orien- tation as in a-b is a portion of a circle. 
# (TEST=2) In the Beltrami-Poincaré half plane, all geodesics are circles centered on the u1-axis. Geodesic starting with a vertical orientation are vertical lines (degenerated circles).


%pastefile ../src/riemann_lsystem/riemannianrules.lpy


######################################
# DEFINITION OF THE METRIC (INTRINSIC)
######################################

def hyperbolic(u,v,*args):
    return 1./v**2

# Euclidean metric (Halfplane PoinCaré-Beltrami)
euclidean_metric = {'g11' : 10, 'g12' : 0, 'g22' : 10}

# Hyperbolic metric (Halfplane PoinCaré-Beltrami)
hyperbolic_metric = {'g11' : hyperbolic, 'g12' : 0, 'g22' : hyperbolic}


Axiom: 
  # Sets the Riemanian space in which the turtle will move
  if TEST == 0: # Euclidean geometry
    nproduce SetSpace(RiemannianSpace2D(**euclidean_metric, umin = -1.0, umax = 1.0, vmin = 0.1, vmax = 2))
  elif TEST == 1: # Hyperbolic geometry
    nproduce SetSpace(RiemannianSpace2D(**hyperbolic_metric, umin = -1.0, umax = 1.0, vmin = 0.1, vmax = 2))
  elif TEST == 2:
    nproduce SetSpace(RiemannianSpace2D(**hyperbolic_metric, umin = -0.5, umax = 3., vmin = 0.1, vmax = 5))
  
  #nproduce PlotSpace
  nproduce ;(0)PlotDS2(dict(DS2_SCALEFACTOR = 25))
  nproduce InitTurtle([-0.5,0.10,0,1])
  nproduce ;(6)_(0.009)
  if TEST < 2:
    nproduce -(10)StaticF(5) @O(0.03)
  else:
    # analyze here the effect of original orientation on geodesic 
    for i in range(0,15):
      nproduce [InitTurtle([0.1,0.1,1,0]) +(90-i) StaticF(5) @O(0.03)_(0.006) Frame(0.2)] 

###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_0 = pgl.Material("Color_0" , ambient = (255,147,0) , diffuse = 0.886275 , )
	Color_0.name = "Color_0"
	context.turtle.setMaterial(0,Color_0)
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('TEST', 'Integer', 2, 0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__references__ = '#'
