%pastefile ../src/riemann_lsystem/riemannianrules.lpy
from math import *
# Lane and Riesenfeld algo for generating BSpline with subdivision

points = [(-0.5,-0.5),(-0.5,0.5),(0.5,0.5),(0.5,-0.5)]

Axiom: 
  sphere = Sphere(5)
  nproduce SetSpace(sphere) ;(0) PlotSpace 
  nproduce InitTurtle([points[0][0],points[0][1],1,0]) 
  nproduce  ,(2)_(0.1) S(0) 


def CtrlPolygon(pts):
  nproduce [,(5)_(0.05) RiemannMoveTo(pts[0][:2]) [,(3)@O(0.2)] @Gc
  for pt in pts[1:]:
    nproduce RiemannLineTo(pt[:2],10) [,(3)@O(0.2)]
  nproduce RiemannLineTo(pts[0][:2],10) [,(3)@O(0.2)]
  nproduce ]

derivation length: DERIVATION
production:

S(nbsubdiv) --> S(nbsubdiv+1)

interpretation:

S(nbsubdiv):
  #nbsubdiv = min(2,nbsubdiv)
  CtrlPolygon(points)
  nb_points_per_geodesic = 5
  cp = turtle.space.lane_riesenfeld_subdivision(points, DEGREE, closed = True, nbsubdiv = nbsubdiv+1, nb_points_per_geodesic = nb_points_per_geodesic)
  for i in range(floor(len(cp)/(nb_points_per_geodesic-1))):
    nproduce [RiemannMoveTo(cp[i*(nb_points_per_geodesic-1)][:2]) ,(6) @O(0.15)]
  nproduce  @Gc BSplineSubdivision(points, DEGREE, True, nbsubdiv+1, nb_points_per_geodesic)

endlsystem

###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_5 = pgl.Material("Color_5" , ambient = (0,0,0) , diffuse = 40 , )
	Color_5.name = "Color_5"
	context.turtle.setMaterial(5,Color_5)
	scalars = [('DEGREE', 'Integer', 2, 1, 6), ('DERIVATION', 'Integer', 2, 1, 3)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	curve = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.763601, 0.0753145, 1),(-0.273579, 0.224159, 1),(-0.285018, -0.301258, 1),(-0.0442948, -0.54963, 1),(0.231222, 0.204425, 1),(0.435962, -0.192388, 1),(0.747462, 0.182907, 1)]) , 
	    stride = 42 , 
	    )
	curve.name = "curve"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': True},[('Curve2D',curve)])
	parameterset = [panel_0,]
	context["__functions__"] = []
	context["__curves__"] = [('curve',curve),]
	context["__parameterset__"] = parameterset
	context["curve"] = curve
__references__ = 'Przemyslaw Prusinkiewicz, Mitra Shirmohammadi, and Faramarz Samavati. L-systems in Geometric Modeling. Proceedings of the Twelfth Annual Worskshop on Descriptional Complexity of Formal Systems, pp. 3-12, 2010. '
