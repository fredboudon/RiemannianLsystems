# Figure 17d-f: Making use of information available in the embedding space.

# Self-avoiding branching structures on a sphere.
"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2022

   Fig17.d --> TEST1 = True, derivation length: 7
   Fig17.e --> TEST1 = False, derivation length: 16

"""

import numpy as np
from math import ceil
from random import random

from riemann_lsystem.lineintersection import *
%pastefile ../src/riemann_lsystem/riemannianrules.lpy

# Surface parameters
R = 1 

# Width to draw the geodesics
LINEWIDTH  = 0.01

# Tighten the nec of the pin form structure to see that the geodesic 
# at some threshold is doomed to stay in the lower part and cannot reach the other part
nb_seg = 10 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

slen = 0.2

# Tree parameter
angle = 45

# Length and step of the path
LENGTH = 2* np.pi *R               # length on the surface of the drawn geodesic path (in a.u.)
STEPSIZE = 0.1     # size of a step (in a.u.) used to draw pieces of geodesic
LEAVES = False
ROTATELEAF = False

# Set of trajectories already existing since the beginning of the simulation
trajectories = LineSet()

def length(n):
  return 4*STEPSIZE - 4*n * STEPSIZE/10.

Axiom: 
  # Sets the Riemanian space in which the turtle will move. The args = (True) 
  space = Sphere(R) #EllipsoidOfRevolution(ra,rb)
  nproduce SetSpace(space)
  nproduce ;(0)PlotSpace()
  trajectories.setSpace(space)
  
  nproduce ;(3)InitTurtle([0.0,0.0,0.0,1.0])
  nproduce ;(6)_(LINEWIDTH)?T(ParameterSet())A(0)

# Try up to 16
derivation length: 16 if MAXDEPTH else 7
production:

?T(tstate) A(n):
  # branching and leaf angles
  ba, la = (-angle, 30) if n % 2 == 0 else (angle,-30)
  
  ilen = 0.15
  uvpq_s = forward(tstate,ilen, MAXSTEPLEN)

  # Construct the corresponding line made of uv coords
  # 1. The turtle has current coordinates uvpq
  curpos = [(tstate.uvpq[0],tstate.uvpq[1])]
  # 2. including current postion in front of the uv coords of the uvpq_s path returned by formard
  uvs = curpos+[(s[0],s[1]) for s in uvpq_s]
  
  # 3. Test the possible intersection of this potential line with 
  # already existing MTs stored in the global object trajectories
  intersection = trajectories.test_intersection(uvs)

  if intersection:
    nproduce ?T(ParameterSet())A(n+1)
  else:
    line_id = trajectories.add_line_from_point(tstate.uvpq,uvs) 
    nproduce P(uvpq_s) 
    nproduce [+(ba)
    if LEAVES:
      nproduce [L(la,0)]
    nproduce ?T(ParameterSet())A(n+1)]
    nproduce ?T(ParameterSet())A(n+1)

L(la,n):
  if n > 5:
    produce
  else:
    produce L(la,n+1)

interpretation:

maximum depth: 2

A(n):
  produce 

L(la,n):
  if n == 0:
    produce
  if ROTATELEAF:
    turn = np.copysign(90,la)
  else:
    turn = 0
  produce ;(2)-(la)/(turn)~l(1.0)



endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('MAXDEPTH', 'Bool', False)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__references__ = '#'
