# Figure 11b: Geodesics on surfaces of revolution.

# Comparison of the behavior of close geodesic trajectories in spaces with positive (sphere) and negative (pseudo-sphere) curvatures. In both examples, geodesics start with parallel orientation (red arrow).'

%pastefile ../src/riemann_lsystem/riemannianrules.lpy
import numpy as np
from math import *

ra = 1.
rb = 0.5

nbseg = 10
length_geodesic = 1.5 

Axiom:
  if ELLIPSOID == 1 :
    # Sets the Riemannian space in which the turtle will move
    nproduce SetSpace(EllipsoidOfRevolution(ra,rb))
    nproduce ;(0)PlotSpace _(0.006)
    u,v,p,q = 0.0,0.0,0,1.
    dl = 0.1,0
    beta = -30. # initial deflection of the geodesics from the vertical
    alpha = degrees(0.05)
  else :
    nproduce SetSpace(PseudoSphere(ra, zmin = -3, zmax = 3))
    nproduce ;(0) PlotSpace(dict(CCW = False)) _(0.01)
    u,v,p,q = 0.1,0.0,1,0.
    dl = 0,0.2
    beta = 30. # initial deflection of the geodesics from the vertical
    alpha = degrees(0.2)
    
  nproduce 
  nproduce ;(6) [InitTurtle([u,v,p,q])+(beta)[_(0.01)Frame(0.3)]A(0)]
  # geodesic parallel close to the first one
  nproduce [InitTurtle([u+dl[0],v+dl[1],p,q])+(beta + alpha)[_(0.01)Frame(0.3)]A(0)]

derivation length: nbseg
production:

A(n):
  nproduce StaticF(length_geodesic/nbseg)
  nproduce A(n+1)


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('ELLIPSOID', 'Bool', False)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	pinfunc = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.05, 1),(0.0606061, 0.663636, 1),(0.329545, 0.213636, 1),(0.725758, 0.131818, 1),(1, 0.118182, 1)]) , 
	    )
	pinfunc.name = "pinfunc"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': False},[('Function',pinfunc)])
	parameterset = [panel_0,]
	context["__functions__"] = [('pinfunc',pinfunc),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["pinfunc"] = pgl.QuantisedFunction(pinfunc)
