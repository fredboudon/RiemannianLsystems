from riemann_lsystem.surfaces import *
from riemann_lsystem.riemannianturtle import *
from math import pi

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

R = 1
alpha0 = -30     # in degrees
Axiom: 
  nproduce SetSpace(Sphere(R)) _(0.01)
  nproduce [,(0) PlotSpace() ]
  nproduce InitTurtle((0,0,0,1))
  nproduce ParallelTransportReset
  nproduce [,(3) ParallelTransportedArrow(alpha0,0.5) ]
  nproduce Path(R*pi/2) 
  nproduce +(90) Path(R*pi/2) 
  nproduce +(90) Path(R*pi/2) 

derivation length:1
production:
interpretation:
Path(l):
  for i in range(10):
    nproduce F(l/10) [,(3) ParallelTransportedArrow(alpha0,0.5) ]
endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	pinfunc = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.05, 1),(0.0606061, 0.663636, 1),(0.329545, 0.213636, 1),(0.725758, 0.131818, 1),(1, 0.118182, 1)]) , 
	    )
	pinfunc.name = "pinfunc"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': False},[('Function',pinfunc)])
	parameterset = [panel_0,]
	context["__functions__"] = [('pinfunc',pinfunc),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["pinfunc"] = pgl.QuantisedFunction(pinfunc)
