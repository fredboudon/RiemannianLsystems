%pastefile ../src/riemann_lsystem/riemannianrules.lpy

"""
	L-systems in Riemannian geometry

		Author: Ch. Godin, Inria
		Date: 2019-2020
	Simulates geodesics on a sphere with a riemannian implementation of
	the main turtle primitives: F, f, + and -

	- To draw a geodesic of length L set with 10 segments of equal size (L/10): length_geodesic = L, nb_seg = 10

"""

import numpy as np
from math import ceil
from random import random
from openalea.plantgl.scenegraph import NurbsCurve2D, NurbsCurve, Extrusion

crossSection = NurbsCurve2D (
            ctrlPointList =[ (-2,0,1), (-2,-2,1), (2,-2,1), (2,2,1),(-2,2,1), (-2,0,1) ],
            stride = 30       
)

axis = NurbsCurve  (
        ctrlPointList = [ (0,0,0,1), (3,3,3,1), (-3,-3,9,1), (0,0,12,1)],
        width=3
        )

mycylinder = Extrusion(
    axis = axis,
    crossSection = crossSection,
    scaleList = [ (2,2),(0.2,0.2) ]
)


# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)


#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

#######################
# DISPLAY PARAMETERS
#######################

# Flags to control the display
PLOTSPACE = True

# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 1. * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

nb_seg = 2 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

length_geodesic = 3.8


Axiom:
  # Sets the Riemannian space in which the turtle will move
  nproduce SetSpace(ExtrusionSurface(mycylinder),0.01,0.01)
  # Sets the initial position of the turtle in this space in the space coordinates: u,v (and p,q their first derivatives)
  u0= 0.5 #np.pi/6
  v0= 0.5 #np.pi/6
  # show pi/2, 0 then different values between pi/2 and pi/3
  a = 0.01 #np.pi/2.3 # to orient the turtle's head at the beginning
  # First option: dram a simple geodesic
  #nproduce InitTurtle([u0,v0,np.cos(a),np.sin(a)])
  #nproduce ;(1)A(0)
  # Second option:draw 10 geodesics with different initial directions
  nb = 10
  for i in range(nb):  
    a += 2*np.pi/nb
    nproduce [InitTurtle([u0,v0,np.cos(np.pi/2+a),np.sin(np.pi/2+a)]) InterpolateColors(3,5, i/(nb-1))A(0)]

derivation length: int(nb_seg)
production:

A(n):
  nproduce F(length_geodesic/nb_seg)
  p = {} 
  #if getIterationNb() == 0:
  #  print(id(p))
  nproduce ?T()
  nproduce A(n+1)

?T(p):
  print('R',id(p),p)

interpretation:

A(n):
  produce 
  #_(FRAMEWIDTH)Frame(FRAMESIZE)


endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
