"""
	L-systems in Riemannian geometry
	
		Author: Ch. Godin, Inria
		Date: 2019-2020
	Simulates geodesics on a sphere with a riemannian implementation of 
	the main turtle primitives: F, f, + and -
	
	- To draw a geodesic of length L set: length_geodesic = L, nb_seg = 1, dashed = False
	- To draw a dashed geodesic of length L with 40 drawn dashed segments: length_geodesic = L, nb_seg = 40, dashed = True
"""

import numpy as np
from math import ceil
from random import random

%pastefile ../RiemannTurtleLib/riemannianrules.lpy

#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0 
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 1. * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################

# Flags to control the display
PLOTSPACE = True

# maximum len of subdivision step required to draw any line on the surface 
# this controls the resolution of the geodesic plot with respect to the 
# surface curvature 
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 0.5 * cm

# To control the Frame size
FRAMESIZE  = 0.3 * meter
FRAMEWIDTH = 1 * cm

#######################
# SIMULATION PARAMETERS
#######################

length_geodesic = R*2*np.pi
# can draw a dashed geodesic to show how f is acting
# for 1-segment geodesic --> set this value at 2 (1 seg drawn, 1 not drawn)
nb_seg = 40 # nb of segment to draw the geodesic (defines the parameter of the F)
           # To draw one geodesic, set it to 1 and set dashed to False

dashed = False
if dashed:
  nb = 2*nb_seg
else:
  nb = nb_seg

Axiom: 
  # Sets the Riemannian space in which the turtle will move
  nproduce SetSpace(Sphere(R))
  # Sets the initial position of the turtle in this space in the space coordinates: u,v (and p,q their first derivatives)
  a = np.pi/4. # to orient the turtle's head at the beginning
  surf_pos = [0,0] 
  surf_dir = [np.cos(a),np.sin(a)] # the norm of the direction won't be used here (it is immediately normalized by InitTurtle)
  posdir = surf_pos+surf_dir
  nproduce InitTurtle(posdir)
  nproduce ;(1)A(0)

production:
derivation length: int(nb)

A(n):
  if (n%2 == 0 and dashed):
    nproduce f(length_geodesic/nb) 
  else:
    nproduce F(length_geodesic/nb) 
  nproduce A(n+1)

interpretation:

A(n):
  produce _(FRAMEWIDTH)Frame(FRAMESIZE)


endlsystem






###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.0
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	pinfunc = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.05, 1),(0.0606061, 0.663636, 1),(0.329545, 0.213636, 1),(0.725758, 0.131818, 1),(1, 0.118182, 1)]) , 
	    )
	pinfunc.name = "pinfunc"
	panel_0 = ({'name': 'Panel 2', 'active': True, 'visible': False},[('Function',pinfunc)])
	parameterset = [panel_0,]
	context["__functions__"] = [('pinfunc',pinfunc),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["pinfunc"] = pgl.QuantisedFunction(pinfunc)
