"""
	L-systems in Riemannian geometry
	
		Author: Ch. Godin, Inria
		Date: 2019-2022

	Example of a 2D intrinsic Riemaniann space
	Space is curved by a point source (represented as a sphere)
	Coordinates are the usual cartesian coords, but the metric is different at different points.
	
"""

import numpy as np
from math import ceil
from random import random, seed

# To import libs from other directories
#(append dynamically other dirs to PYTHONPATH variable)
from importlib import reload

import riemann_lsystem.surfaces
surfaces = reload(riemann_lsystem.surfaces)
import riemann_lsystem.riemannianturtle
riemannian_turtle = reload(riemann_lsystem.riemannianturtle)

from riemann_lsystem.surfaces import *
from riemann_lsystem.riemannianturtle import *

%pastefile ../src/riemann_lsystem/riemannianrules.lpy

# Flags to control the display
PLOTSPACE = True
PLOTDS2 = False

######################################
# DEFINITION OF THE METRIC (INTRINSIC)
######################################

# Point source metric : metric generated by a point source

# Parameters used both for psi and psd metric
# metric is diagonal in the local frame (r,theta). 
# These formula define r, theta, and control ratio parameters
def ps_params(u,v,source,ry,rz):
    p = np.array((u, v))
    s = np.array(source)
    r = np.linalg.norm(s - p)

    costheta = (s[0] - u) / r
    sintheta = (s[1] - v) / r

    ratioy = r / ry
    ratioz = r / rz
    return r,costheta,sintheta,ratioy,ratioz
    

alpha = 1.0
# Point source metric (psi) (increasing with radius to the source)
def g11_ps(u,v,*args):
    r, costheta, sintheta, ratioy, ratioz = ps_params(u, v, *args)
    return alpha * r**1.5
# g11 with swapped u,v --> v,u (to carry out devivative of first argument)
def g11s_ps(v,u,*args):
    return g11_ps(u,v,*args)

# g12 == g21
def g12_ps(u,v,*args):
    r, costheta, sintheta, ratioy, ratioz = ps_params(u, v,*args)
    return 0
def g12s_ps(v,u,*args):
    return g12_ps(u,v,*args)

def g22_ps(u,v,*args):
    r, costheta, sintheta, ratioy, ratioz = ps_params(u, v,*args)
    return alpha * r**1.5
def g22s_ps(v,u,*args):
    return g22_ps(u,v,*args)



#######################
# Units
#######################
# Scaling model in graphic scene
meter = 1.0 # An object of 1 meter is mapped onto a graphic unit size of 1.0
            # (F(1) for instance corresponds to a forward move of 1 meter)
cm = 0.01 * meter

# Surface parameters
R = 1. * meter   # Radius of the sphere in meter

#######################
# DISPLAY PARAMETERS
#######################


# maximum len of subdivision step required to draw any line on the surface
# this controls the resolution of the geodesic plot with respect to the
# surface curvature
MAXSTEPLEN = 1 * cm  # Should be > 0.0

# Width to draw the geodesics
LINEWIDTH  = 0.9 * cm

# To control the Frame size
FRAMESIZE  = 0.5 * meter
FRAMEWIDTH = 0.6 * cm

#######################
# SIMULATION PARAMETERS
#######################

# Tighten the nec of the pin form structure to see that the geodesic 
# at some threshold is doomed to stay in the lower part and cannot reach the other part
nb_seg = 10 # nb of segment to draw the geodesic (defines the parameter of the F)
            # To draw one geodesic, set it to 1 and set dashed to False

slen = 0.10 # 

#Metric parameters for psi and psd
source = (0.0,1.)
ry = 3.
rz = 3.

TEST = 3

extern(startx = -1.9)

Axiom: 
  # Sets the Riemanian space in which the turtle will move
  params = (source, ry, rz)
  # choice of functions used to define the intrinsic metric (see above their definition
  metric_funcs = {'g11' : g11_ps, 'g12' : g12_ps, 'g22' : g22_ps, 'g11s' : g11s_ps, 'g12s' : g12s_ps, 'g22s' : g22s_ps}
  #metric_funcs = {'g11' : g11_psi, 'g12' : g12_psi, 'g22' : g22_psi, 'g11s' : g11s_psi, 'g12s' : g12s_psi, 'g22s' : g22s_psi}
  #metric_funcs = {'g11' : g11_psd, 'g12' : g12_psd, 'g22' : g22_psd, 'g11s' : g11s_psd, 'g12s' : g12s_psd, 'g22s' : g22s_psd}
  if TEST == 1:
    nproduce SetSpace(RiemannianSpace2D(**metric_funcs, umin = -1, umax = 1., vmin = 0, vmax = 2, metric_tensor_params = params))
    nproduce ;(0)PlotSpace
    nproduce InitTurtle([0.,0.,0.,1.])
    nproduce S;(6)_(LINEWIDTH)A(0)@O(0.03)
  elif TEST == 2:
    nproduce SetSpace(RiemannianSpace2D(**metric_funcs, umin = -1, umax = 1., vmin = 0, vmax = 2, metric_tensor_params = params))
    nproduce ;(0)PlotSpace
    nproduce PlotDS2(dict(DS2_SCALEFACTOR = 4))
    nproduce InitTurtle([-0.50,0.,0.,1.])
    nproduce +(-25)
    nproduce S;(6)_(LINEWIDTH)A(0)@O(0.03)
  elif TEST == 3: # analyze here the effect of original orientation on geodesic 
    nproduce SetSpace(RiemannianSpace2D(**metric_funcs, umin = -2, umax = 2., vmin = -1, vmax = 2.5, metric_tensor_params = params))
    #nproduce ;(0)PlotSpace
    #nproduce PlotDS2(dict(DS2_SCALEFACTOR = 4))
    nproduce InitTurtle([startx,0.12,0.9,0.4])
    nproduce [S]
    nproduce ;(3)_(0.01)F(2)-(120)F(2)-(120)F(2)
#    a = 80
#    for i in range(a+1):
#      nproduce [InitTurtle([0.,0.,np.sin(-np.pi/2 + np.pi/a*i),np.cos(-np.pi/2 + np.pi/a*i)])
#      nproduce ;(6)_(LINEWIDTH)A(0)@O(0.03)]    



derivation length: 0
production:
decomposition:
maximum depth: 4
F(x):
  nproduce F(x/3.)+(60)F(x/3.)-(120)F(x/3.)+(60)+F(x/3.)

interpretation:

A(n):
  produce _(FRAMEWIDTH) Frame(FRAMESIZE)

S: 
  source3D = [0]
  source3D += source
  produce [MoveTo(source3D);(4)@O(0.05)]
  
endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_5 = pgl.Material("Color_5" , ambient = (0,0,60) , diffuse = 3 , transparency = 0.69 , )
	Color_5.name = "Color_5"
	context.turtle.setMaterial(5,Color_5)
	Color_14 = pgl.Material("Color_14" , transparency = 0.45 , )
	Color_14.name = "Color_14"
	context.turtle.setMaterial(14,Color_14)
	context.animation_timestep = 0.001
	context.options.setSelection('Axiom decomposition',1)
	scalars = [('a', 'Float', 1.0, 0.1, 5.0, 2), ('b', 'Float', 2.87, 0.1, 5.0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
__references__ = '#'
